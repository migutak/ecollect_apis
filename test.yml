swagger: '2.0'
info:
  version: 1.0.0
  title: ecollect_apis
  description: ecollect_apis
basePath: /api
paths:
  /sms:
    post:
      tags:
        - sms
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sms.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
    patch:
      tags:
        - sms
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sms.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
    put:
      tags:
        - sms
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sms.replaceOrCreate__put_sms
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
    get:
      tags:
        - sms
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sms.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sms'
      deprecated: false
  /sms/replaceOrCreate:
    post:
      tags:
        - sms
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sms.replaceOrCreate__post_sms_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
  /sms/upsertWithWhere:
    post:
      tags:
        - sms
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sms.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
  '/sms/{id}/exists':
    get:
      tags:
        - sms
      summary: Check whether a model instance exists in the data source.
      operationId: 'sms.exists__get_sms_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/sms/{id}':
    head:
      tags:
        - sms
      summary: Check whether a model instance exists in the data source.
      operationId: 'sms.exists__head_sms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sms
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sms.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
    put:
      tags:
        - sms
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sms.replaceById__put_sms_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
    delete:
      tags:
        - sms
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sms.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sms
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sms.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sms id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
  '/sms/{id}/replace':
    post:
      tags:
        - sms
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sms.replaceById__post_sms_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
  /sms/findOne:
    get:
      tags:
        - sms
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sms.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sms'
      deprecated: false
  /sms/update:
    post:
      tags:
        - sms
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sms.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sms'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /sms/count:
    get:
      tags:
        - sms
      summary: Count instances of the model matched by where from the data source.
      operationId: sms.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /sms/change-stream:
    post:
      tags:
        - sms
      summary: Create a change stream.
      operationId: sms.createChangeStream__post_sms_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - sms
      summary: Create a change stream.
      operationId: sms.createChangeStream__get_sms_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/demandsdue/{id}/guarantors/{fk}':
    get:
      tags:
        - demandsdue
      summary: Find a related item by id for guarantors.
      operationId: demandsdue.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    delete:
      tags:
        - demandsdue
      summary: Delete a related item by id for guarantors.
      operationId: demandsdue.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - demandsdue
      summary: Update a related item by id for guarantors.
      operationId: demandsdue.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  '/demandsdue/{id}/guarantors':
    get:
      tags:
        - demandsdue
      summary: Queries guarantors of demandsdue.
      operationId: demandsdue.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantors'
      deprecated: false
    post:
      tags:
        - demandsdue
      summary: Creates a new instance in guarantors of this model.
      operationId: demandsdue.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    delete:
      tags:
        - demandsdue
      summary: Deletes all guarantors of this model.
      operationId: demandsdue.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/demandsdue/{id}/guarantors/count':
    get:
      tags:
        - demandsdue
      summary: Counts guarantors of demandsdue.
      operationId: demandsdue.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demandsdue:
    post:
      tags:
        - demandsdue
      summary: Create a new instance of the model and persist it into the data source.
      operationId: demandsdue.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    patch:
      tags:
        - demandsdue
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: demandsdue.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    put:
      tags:
        - demandsdue
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsdue.replaceOrCreate__put_demandsdue
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    get:
      tags:
        - demandsdue
      summary: Find all instances of the model matched by filter from the data source.
      operationId: demandsdue.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsdue'
      deprecated: false
  /demandsdue/replaceOrCreate:
    post:
      tags:
        - demandsdue
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsdue.replaceOrCreate__post_demandsdue_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  /demandsdue/upsertWithWhere:
    post:
      tags:
        - demandsdue
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: demandsdue.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/demandsdue/{id}/exists':
    get:
      tags:
        - demandsdue
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsdue.exists__get_demandsdue_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/demandsdue/{id}':
    head:
      tags:
        - demandsdue
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsdue.exists__head_demandsdue_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - demandsdue
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: demandsdue.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    put:
      tags:
        - demandsdue
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsdue.replaceById__put_demandsdue_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - demandsdue
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: demandsdue.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - demandsdue
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: demandsdue.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: demandsdue id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/demandsdue/{id}/replace':
    post:
      tags:
        - demandsdue
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsdue.replaceById__post_demandsdue_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  /demandsdue/findOne:
    get:
      tags:
        - demandsdue
      summary: Find first instance of the model matched by filter from the data source.
      operationId: demandsdue.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  /demandsdue/update:
    post:
      tags:
        - demandsdue
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: demandsdue.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /demandsdue/count:
    get:
      tags:
        - demandsdue
      summary: Count instances of the model matched by where from the data source.
      operationId: demandsdue.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demandsdue/change-stream:
    post:
      tags:
        - demandsdue
      summary: Create a change stream.
      operationId: demandsdue.createChangeStream__post_demandsdue_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - demandsdue
      summary: Create a change stream.
      operationId: demandsdue.createChangeStream__get_demandsdue_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /demandsdue/total:
    get:
      tags:
        - demandsdue
      operationId: demandsdue.total
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /demandsdue/totalsearch:
    get:
      tags:
        - demandsdue
      operationId: demandsdue.totalsearch
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /demandsdue/search:
    get:
      tags:
        - demandsdue
      operationId: demandsdue.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
        - name: limit
          in: query
          required: false
          type: number
          format: double
        - name: page
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /demandsduecc:
    post:
      tags:
        - demandsduecc
      summary: Create a new instance of the model and persist it into the data source.
      operationId: demandsduecc.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    patch:
      tags:
        - demandsduecc
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: demandsduecc.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    put:
      tags:
        - demandsduecc
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsduecc.replaceOrCreate__put_demandsduecc
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    get:
      tags:
        - demandsduecc
      summary: Find all instances of the model matched by filter from the data source.
      operationId: demandsduecc.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsduecc'
      deprecated: false
  /demandsduecc/replaceOrCreate:
    post:
      tags:
        - demandsduecc
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsduecc.replaceOrCreate__post_demandsduecc_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  /demandsduecc/upsertWithWhere:
    post:
      tags:
        - demandsduecc
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: demandsduecc.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  '/demandsduecc/{id}/exists':
    get:
      tags:
        - demandsduecc
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsduecc.exists__get_demandsduecc_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/demandsduecc/{id}':
    head:
      tags:
        - demandsduecc
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsduecc.exists__head_demandsduecc_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - demandsduecc
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: demandsduecc.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    put:
      tags:
        - demandsduecc
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsduecc.replaceById__put_demandsduecc_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    delete:
      tags:
        - demandsduecc
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: demandsduecc.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - demandsduecc
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: demandsduecc.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: demandsduecc id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  '/demandsduecc/{id}/replace':
    post:
      tags:
        - demandsduecc
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsduecc.replaceById__post_demandsduecc_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  /demandsduecc/findOne:
    get:
      tags:
        - demandsduecc
      summary: Find first instance of the model matched by filter from the data source.
      operationId: demandsduecc.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  /demandsduecc/update:
    post:
      tags:
        - demandsduecc
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: demandsduecc.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /demandsduecc/count:
    get:
      tags:
        - demandsduecc
      summary: Count instances of the model matched by where from the data source.
      operationId: demandsduecc.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demandsduecc/change-stream:
    post:
      tags:
        - demandsduecc
      summary: Create a change stream.
      operationId: demandsduecc.createChangeStream__post_demandsduecc_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - demandsduecc
      summary: Create a change stream.
      operationId: demandsduecc.createChangeStream__get_demandsduecc_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /demandsduecc/total:
    get:
      tags:
        - demandsduecc
      operationId: demandsduecc.total__get_demandsduecc_total
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /demandsduecc/search:
    get:
      tags:
        - demandsduecc
      operationId: demandsduecc.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /demandsettings:
    post:
      tags:
        - demandsettings
      summary: Create a new instance of the model and persist it into the data source.
      operationId: demandsettings.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
    patch:
      tags:
        - demandsettings
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: demandsettings.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
    put:
      tags:
        - demandsettings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsettings.replaceOrCreate__put_demandsettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
    get:
      tags:
        - demandsettings
      summary: Find all instances of the model matched by filter from the data source.
      operationId: demandsettings.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsettings'
      deprecated: false
  /demandsettings/replaceOrCreate:
    post:
      tags:
        - demandsettings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandsettings.replaceOrCreate__post_demandsettings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
  /demandsettings/upsertWithWhere:
    post:
      tags:
        - demandsettings
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: demandsettings.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
  '/demandsettings/{id}/exists':
    get:
      tags:
        - demandsettings
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsettings.exists__get_demandsettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/demandsettings/{id}':
    head:
      tags:
        - demandsettings
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandsettings.exists__head_demandsettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - demandsettings
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: demandsettings.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
    put:
      tags:
        - demandsettings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsettings.replaceById__put_demandsettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
    delete:
      tags:
        - demandsettings
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: demandsettings.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - demandsettings
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: demandsettings.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: demandsettings id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
  '/demandsettings/{id}/replace':
    post:
      tags:
        - demandsettings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandsettings.replaceById__post_demandsettings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
  /demandsettings/findOne:
    get:
      tags:
        - demandsettings
      summary: Find first instance of the model matched by filter from the data source.
      operationId: demandsettings.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsettings'
      deprecated: false
  /demandsettings/update:
    post:
      tags:
        - demandsettings
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: demandsettings.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /demandsettings/count:
    get:
      tags:
        - demandsettings
      summary: Count instances of the model matched by where from the data source.
      operationId: demandsettings.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demandsettings/change-stream:
    post:
      tags:
        - demandsettings
      summary: Create a change stream.
      operationId: demandsettings.createChangeStream__post_demandsettings_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - demandsettings
      summary: Create a change stream.
      operationId: demandsettings.createChangeStream__get_demandsettings_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /demandshistory:
    post:
      tags:
        - demandshistory
      summary: Create a new instance of the model and persist it into the data source.
      operationId: demandshistory.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
    patch:
      tags:
        - demandshistory
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: demandshistory.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
    put:
      tags:
        - demandshistory
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandshistory.replaceOrCreate__put_demandshistory
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
    get:
      tags:
        - demandshistory
      summary: Find all instances of the model matched by filter from the data source.
      operationId: demandshistory.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandshistory'
      deprecated: false
  /demandshistory/replaceOrCreate:
    post:
      tags:
        - demandshistory
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: demandshistory.replaceOrCreate__post_demandshistory_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
  /demandshistory/upsertWithWhere:
    post:
      tags:
        - demandshistory
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: demandshistory.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
  '/demandshistory/{id}/exists':
    get:
      tags:
        - demandshistory
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandshistory.exists__get_demandshistory_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/demandshistory/{id}':
    head:
      tags:
        - demandshistory
      summary: Check whether a model instance exists in the data source.
      operationId: 'demandshistory.exists__head_demandshistory_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - demandshistory
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: demandshistory.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
    put:
      tags:
        - demandshistory
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandshistory.replaceById__put_demandshistory_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
    delete:
      tags:
        - demandshistory
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: demandshistory.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - demandshistory
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: demandshistory.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: demandshistory id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
  '/demandshistory/{id}/replace':
    post:
      tags:
        - demandshistory
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'demandshistory.replaceById__post_demandshistory_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
  /demandshistory/findOne:
    get:
      tags:
        - demandshistory
      summary: Find first instance of the model matched by filter from the data source.
      operationId: demandshistory.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandshistory'
      deprecated: false
  /demandshistory/update:
    post:
      tags:
        - demandshistory
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: demandshistory.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/demandshistory'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /demandshistory/count:
    get:
      tags:
        - demandshistory
      summary: Count instances of the model matched by where from the data source.
      operationId: demandshistory.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /demandshistory/change-stream:
    post:
      tags:
        - demandshistory
      summary: Create a change stream.
      operationId: demandshistory.createChangeStream__post_demandshistory_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - demandshistory
      summary: Create a change stream.
      operationId: demandshistory.createChangeStream__get_demandshistory_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /notehis:
    post:
      tags:
        - notehis
      summary: Create a new instance of the model and persist it into the data source.
      operationId: notehis.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
    patch:
      tags:
        - notehis
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: notehis.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
    put:
      tags:
        - notehis
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: notehis.replaceOrCreate__put_notehis
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
    get:
      tags:
        - notehis
      summary: Find all instances of the model matched by filter from the data source.
      operationId: notehis.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/notehis'
      deprecated: false
  /notehis/replaceOrCreate:
    post:
      tags:
        - notehis
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: notehis.replaceOrCreate__post_notehis_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
  /notehis/upsertWithWhere:
    post:
      tags:
        - notehis
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: notehis.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
  '/notehis/{id}/exists':
    get:
      tags:
        - notehis
      summary: Check whether a model instance exists in the data source.
      operationId: 'notehis.exists__get_notehis_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/notehis/{id}':
    head:
      tags:
        - notehis
      summary: Check whether a model instance exists in the data source.
      operationId: 'notehis.exists__head_notehis_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - notehis
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: notehis.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
    put:
      tags:
        - notehis
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'notehis.replaceById__put_notehis_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
    delete:
      tags:
        - notehis
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: notehis.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - notehis
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: notehis.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: notehis id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
  '/notehis/{id}/replace':
    post:
      tags:
        - notehis
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'notehis.replaceById__post_notehis_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
  /notehis/findOne:
    get:
      tags:
        - notehis
      summary: Find first instance of the model matched by filter from the data source.
      operationId: notehis.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notehis'
      deprecated: false
  /notehis/update:
    post:
      tags:
        - notehis
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: notehis.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /notehis/count:
    get:
      tags:
        - notehis
      summary: Count instances of the model matched by where from the data source.
      operationId: notehis.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /notehis/change-stream:
    post:
      tags:
        - notehis
      summary: Create a change stream.
      operationId: notehis.createChangeStream__post_notehis_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - notehis
      summary: Create a change stream.
      operationId: notehis.createChangeStream__get_notehis_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /notehis/total:
    get:
      tags:
        - notehis
      operationId: notehis.total
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /notehis/custnotes:
    get:
      tags:
        - notehis
      operationId: notehis.custnotes
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
        - name: offset
          in: query
          required: false
          type: number
          format: double
        - name: next
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /notehis/updatenote:
    post:
      tags:
        - notehis
      operationId: notehis.updatenote
      parameters:
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/notehis'
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/cards_stage/{id}/demandsdue/{fk}':
    get:
      tags:
        - cards_stage
      summary: Find a related item by id for demandsdue.
      operationId: cards_stage.prototype.__findById__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdue
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    delete:
      tags:
        - cards_stage
      summary: Delete a related item by id for demandsdue.
      operationId: cards_stage.prototype.__destroyById__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdue
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - cards_stage
      summary: Update a related item by id for demandsdue.
      operationId: cards_stage.prototype.__updateById__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdue
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
  '/cards_stage/{id}/static':
    get:
      tags:
        - cards_stage
      summary: Fetches hasOne relation static.
      operationId: cards_stage.prototype.__get__static
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    post:
      tags:
        - cards_stage
      summary: Creates a new instance in static of this model.
      operationId: cards_stage.prototype.__create__static
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    put:
      tags:
        - cards_stage
      summary: Update static of this model.
      operationId: cards_stage.prototype.__update__static
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    delete:
      tags:
        - cards_stage
      summary: Deletes static of this model.
      operationId: cards_stage.prototype.__destroy__static
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/cards_stage/{id}/demandsdue':
    get:
      tags:
        - cards_stage
      summary: Queries demandsdue of cards_stage.
      operationId: cards_stage.prototype.__get__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsduecc'
      deprecated: false
    post:
      tags:
        - cards_stage
      summary: Creates a new instance in demandsdue of this model.
      operationId: cards_stage.prototype.__create__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsduecc'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsduecc'
      deprecated: false
    delete:
      tags:
        - cards_stage
      summary: Deletes all demandsdue of this model.
      operationId: cards_stage.prototype.__delete__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/cards_stage/{id}/demandsdue/count':
    get:
      tags:
        - cards_stage
      summary: Counts demandsdue of cards_stage.
      operationId: cards_stage.prototype.__count__demandsdue
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cards_stage:
    post:
      tags:
        - cards_stage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: cards_stage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
    patch:
      tags:
        - cards_stage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: cards_stage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
    put:
      tags:
        - cards_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cards_stage.replaceOrCreate__put_cards_stage
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
    get:
      tags:
        - cards_stage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: cards_stage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/cards_stage'
      deprecated: false
  /cards_stage/replaceOrCreate:
    post:
      tags:
        - cards_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cards_stage.replaceOrCreate__post_cards_stage_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
  /cards_stage/upsertWithWhere:
    post:
      tags:
        - cards_stage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: cards_stage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
  '/cards_stage/{id}/exists':
    get:
      tags:
        - cards_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_stage.exists__get_cards_stage_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/cards_stage/{id}':
    head:
      tags:
        - cards_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_stage.exists__head_cards_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - cards_stage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: cards_stage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
    put:
      tags:
        - cards_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_stage.replaceById__put_cards_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
    delete:
      tags:
        - cards_stage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: cards_stage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - cards_stage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: cards_stage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: cards_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
  '/cards_stage/{id}/replace':
    post:
      tags:
        - cards_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_stage.replaceById__post_cards_stage_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
  /cards_stage/findOne:
    get:
      tags:
        - cards_stage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: cards_stage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_stage'
      deprecated: false
  /cards_stage/update:
    post:
      tags:
        - cards_stage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: cards_stage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /cards_stage/count:
    get:
      tags:
        - cards_stage
      summary: Count instances of the model matched by where from the data source.
      operationId: cards_stage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cards_stage/change-stream:
    post:
      tags:
        - cards_stage
      summary: Create a change stream.
      operationId: cards_stage.createChangeStream__post_cards_stage_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - cards_stage
      summary: Create a change stream.
      operationId: cards_stage.createChangeStream__get_cards_stage_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /cards_stage/search:
    get:
      tags:
        - cards_stage
      operationId: cards_stage.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/qcards/{id}/guarantordetails/{fk}':
    get:
      tags:
        - qcards
      summary: Find a related item by id for guarantordetails.
      operationId: qcards.prototype.__findById__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantordetails
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - qcards
      summary: Delete a related item by id for guarantordetails.
      operationId: qcards.prototype.__destroyById__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantordetails
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - qcards
      summary: Update a related item by id for guarantordetails.
      operationId: qcards.prototype.__updateById__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantordetails
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/qcards/{id}/tblcard_static':
    get:
      tags:
        - qcards
      summary: Fetches hasOne relation tblcard_static.
      operationId: qcards.prototype.__get__tblcard_static
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    post:
      tags:
        - qcards
      summary: Creates a new instance in tblcard_static of this model.
      operationId: qcards.prototype.__create__tblcard_static
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    put:
      tags:
        - qcards
      summary: Update tblcard_static of this model.
      operationId: qcards.prototype.__update__tblcard_static
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    delete:
      tags:
        - qcards
      summary: Deletes tblcard_static of this model.
      operationId: qcards.prototype.__destroy__tblcard_static
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/qcards/{id}/guarantordetails':
    get:
      tags:
        - qcards
      summary: Queries guarantordetails of qcards.
      operationId: qcards.prototype.__get__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - qcards
      summary: Creates a new instance in guarantordetails of this model.
      operationId: qcards.prototype.__create__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - qcards
      summary: Deletes all guarantordetails of this model.
      operationId: qcards.prototype.__delete__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/qcards/{id}/guarantordetails/count':
    get:
      tags:
        - qcards
      summary: Counts guarantordetails of qcards.
      operationId: qcards.prototype.__count__guarantordetails
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qcards:
    post:
      tags:
        - qcards
      summary: Create a new instance of the model and persist it into the data source.
      operationId: qcards.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
    patch:
      tags:
        - qcards
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: qcards.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
    put:
      tags:
        - qcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qcards.replaceOrCreate__put_qcards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
    get:
      tags:
        - qcards
      summary: Find all instances of the model matched by filter from the data source.
      operationId: qcards.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/qcards'
      deprecated: false
  /qcards/replaceOrCreate:
    post:
      tags:
        - qcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qcards.replaceOrCreate__post_qcards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
  /qcards/upsertWithWhere:
    post:
      tags:
        - qcards
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: qcards.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
  '/qcards/{id}/exists':
    get:
      tags:
        - qcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'qcards.exists__get_qcards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/qcards/{id}':
    head:
      tags:
        - qcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'qcards.exists__head_qcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - qcards
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: qcards.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
    put:
      tags:
        - qcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qcards.replaceById__put_qcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
    delete:
      tags:
        - qcards
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: qcards.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - qcards
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: qcards.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: qcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
  '/qcards/{id}/replace':
    post:
      tags:
        - qcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qcards.replaceById__post_qcards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
  /qcards/findOne:
    get:
      tags:
        - qcards
      summary: Find first instance of the model matched by filter from the data source.
      operationId: qcards.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qcards'
      deprecated: false
  /qcards/update:
    post:
      tags:
        - qcards
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: qcards.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qcards'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /qcards/count:
    get:
      tags:
        - qcards
      summary: Count instances of the model matched by where from the data source.
      operationId: qcards.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qcards/change-stream:
    post:
      tags:
        - qcards
      summary: Create a change stream.
      operationId: qcards.createChangeStream__post_qcards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - qcards
      summary: Create a change stream.
      operationId: qcards.createChangeStream__get_qcards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /qcards/search:
    get:
      tags:
        - qcards
      operationId: qcards.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/tbl_q_all/{id}/demandsdues/{fk}':
    get:
      tags:
        - tbl_q_all
      summary: Find a related item by id for demandsdues.
      operationId: tbl_q_all.prototype.__findById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tbl_q_all
      summary: Delete a related item by id for demandsdues.
      operationId: tbl_q_all.prototype.__destroyById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tbl_q_all
      summary: Update a related item by id for demandsdues.
      operationId: tbl_q_all.prototype.__updateById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/tbl_q_all/{id}/guarantors/{fk}':
    get:
      tags:
        - tbl_q_all
      summary: Find a related item by id for guarantors.
      operationId: tbl_q_all.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tbl_q_all
      summary: Delete a related item by id for guarantors.
      operationId: tbl_q_all.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tbl_q_all
      summary: Update a related item by id for guarantors.
      operationId: tbl_q_all.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/tbl_q_all/{id}/demandsdues':
    get:
      tags:
        - tbl_q_all
      summary: Queries demandsdues of tbl_q_all.
      operationId: tbl_q_all.prototype.__get__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsdue'
      deprecated: false
    post:
      tags:
        - tbl_q_all
      summary: Creates a new instance in demandsdues of this model.
      operationId: tbl_q_all.prototype.__create__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tbl_q_all
      summary: Deletes all demandsdues of this model.
      operationId: tbl_q_all.prototype.__delete__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tbl_q_all/{id}/demandsdues/count':
    get:
      tags:
        - tbl_q_all
      summary: Counts demandsdues of tbl_q_all.
      operationId: tbl_q_all.prototype.__count__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/tbl_q_all/{id}/guarantors':
    get:
      tags:
        - tbl_q_all
      summary: Queries guarantors of tbl_q_all.
      operationId: tbl_q_all.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - tbl_q_all
      summary: Creates a new instance in guarantors of this model.
      operationId: tbl_q_all.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tbl_q_all
      summary: Deletes all guarantors of this model.
      operationId: tbl_q_all.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tbl_q_all/{id}/guarantors/count':
    get:
      tags:
        - tbl_q_all
      summary: Counts guarantors of tbl_q_all.
      operationId: tbl_q_all.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_q_all:
    post:
      tags:
        - tbl_q_all
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_q_all.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
    patch:
      tags:
        - tbl_q_all
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_q_all.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
    put:
      tags:
        - tbl_q_all
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_q_all.replaceOrCreate__put_tbl_q_all
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
    get:
      tags:
        - tbl_q_all
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_q_all.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_q_all'
      deprecated: false
  /tbl_q_all/replaceOrCreate:
    post:
      tags:
        - tbl_q_all
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_q_all.replaceOrCreate__post_tbl_q_all_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
  /tbl_q_all/upsertWithWhere:
    post:
      tags:
        - tbl_q_all
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_q_all.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
  '/tbl_q_all/{id}/exists':
    get:
      tags:
        - tbl_q_all
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_q_all.exists__get_tbl_q_all_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_q_all/{id}':
    head:
      tags:
        - tbl_q_all
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_q_all.exists__head_tbl_q_all_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_q_all
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_q_all.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
    put:
      tags:
        - tbl_q_all
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_q_all.replaceById__put_tbl_q_all_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
    delete:
      tags:
        - tbl_q_all
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_q_all.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_q_all
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_q_all.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_q_all id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
  '/tbl_q_all/{id}/replace':
    post:
      tags:
        - tbl_q_all
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_q_all.replaceById__post_tbl_q_all_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
  /tbl_q_all/findOne:
    get:
      tags:
        - tbl_q_all
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_q_all.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_q_all'
      deprecated: false
  /tbl_q_all/update:
    post:
      tags:
        - tbl_q_all
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_q_all.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_q_all'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_q_all/count:
    get:
      tags:
        - tbl_q_all
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_q_all.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_q_all/change-stream:
    post:
      tags:
        - tbl_q_all
      summary: Create a change stream.
      operationId: tbl_q_all.createChangeStream__post_tbl_q_all_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_q_all
      summary: Create a change stream.
      operationId: tbl_q_all.createChangeStream__get_tbl_q_all_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_q_all/viewallcc:
    get:
      tags:
        - tbl_q_all
      operationId: tbl_q_all.viewallcc
      parameters:
        - name: pagesize
          in: query
          required: false
          type: string
        - name: pagenum
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /tbl_q_all/cmdacc:
    get:
      tags:
        - tbl_q_all
      operationId: tbl_q_all.cmdacc
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /tbl_q_all/viewall:
    get:
      tags:
        - tbl_q_all
      operationId: tbl_q_all.viewall
      parameters:
        - name: pagesize
          in: query
          required: false
          type: string
        - name: pagenum
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/watch_stage/{id}/guarantors/{fk}':
    get:
      tags:
        - watch_stage
      summary: Find a related item by id for guarantors.
      operationId: watch_stage.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - watch_stage
      summary: Delete a related item by id for guarantors.
      operationId: watch_stage.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - watch_stage
      summary: Update a related item by id for guarantors.
      operationId: watch_stage.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/watch_stage/{id}/watch':
    get:
      tags:
        - watch_stage
      summary: Fetches hasOne relation watch.
      operationId: watch_stage.prototype.__get__watch
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    post:
      tags:
        - watch_stage
      summary: Creates a new instance in watch of this model.
      operationId: watch_stage.prototype.__create__watch
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    put:
      tags:
        - watch_stage
      summary: Update watch of this model.
      operationId: watch_stage.prototype.__update__watch
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    delete:
      tags:
        - watch_stage
      summary: Deletes watch of this model.
      operationId: watch_stage.prototype.__destroy__watch
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/watch_stage/{id}/guarantors':
    get:
      tags:
        - watch_stage
      summary: Queries guarantors of watch_stage.
      operationId: watch_stage.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - watch_stage
      summary: Creates a new instance in guarantors of this model.
      operationId: watch_stage.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - watch_stage
      summary: Deletes all guarantors of this model.
      operationId: watch_stage.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/watch_stage/{id}/guarantors/count':
    get:
      tags:
        - watch_stage
      summary: Counts guarantors of watch_stage.
      operationId: watch_stage.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /watch_stage:
    post:
      tags:
        - watch_stage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: watch_stage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
    patch:
      tags:
        - watch_stage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: watch_stage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
    put:
      tags:
        - watch_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: watch_stage.replaceOrCreate__put_watch_stage
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
    get:
      tags:
        - watch_stage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: watch_stage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/watch_stage'
      deprecated: false
  /watch_stage/replaceOrCreate:
    post:
      tags:
        - watch_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: watch_stage.replaceOrCreate__post_watch_stage_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
  /watch_stage/upsertWithWhere:
    post:
      tags:
        - watch_stage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: watch_stage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
  '/watch_stage/{id}/exists':
    get:
      tags:
        - watch_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'watch_stage.exists__get_watch_stage_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/watch_stage/{id}':
    head:
      tags:
        - watch_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'watch_stage.exists__head_watch_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - watch_stage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: watch_stage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
    put:
      tags:
        - watch_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'watch_stage.replaceById__put_watch_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
    delete:
      tags:
        - watch_stage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: watch_stage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - watch_stage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: watch_stage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
  '/watch_stage/{id}/replace':
    post:
      tags:
        - watch_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'watch_stage.replaceById__post_watch_stage_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
  /watch_stage/findOne:
    get:
      tags:
        - watch_stage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: watch_stage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_stage'
      deprecated: false
  /watch_stage/update:
    post:
      tags:
        - watch_stage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: watch_stage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /watch_stage/count:
    get:
      tags:
        - watch_stage
      summary: Count instances of the model matched by where from the data source.
      operationId: watch_stage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /watch_stage/change-stream:
    post:
      tags:
        - watch_stage
      summary: Create a change stream.
      operationId: watch_stage.createChangeStream__post_watch_stage_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - watch_stage
      summary: Create a change stream.
      operationId: watch_stage.createChangeStream__get_watch_stage_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /watch_stage/total:
    get:
      tags:
        - watch_stage
      operationId: watch_stage.total
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /watch_stage/search:
    get:
      tags:
        - watch_stage
      operationId: watch_stage.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /watch_stage/paged:
    get:
      tags:
        - watch_stage
      operationId: watch_stage.paged
      parameters:
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tbl_smstemplate:
    post:
      tags:
        - tbl_smstemplate
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_smstemplate.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
    patch:
      tags:
        - tbl_smstemplate
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_smstemplate.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
    put:
      tags:
        - tbl_smstemplate
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_smstemplate.replaceOrCreate__put_tbl_smstemplate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
    get:
      tags:
        - tbl_smstemplate
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_smstemplate.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  /tbl_smstemplate/replaceOrCreate:
    post:
      tags:
        - tbl_smstemplate
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_smstemplate.replaceOrCreate__post_tbl_smstemplate_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  /tbl_smstemplate/upsertWithWhere:
    post:
      tags:
        - tbl_smstemplate
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_smstemplate.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  '/tbl_smstemplate/{id}/exists':
    get:
      tags:
        - tbl_smstemplate
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_smstemplate.exists__get_tbl_smstemplate_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_smstemplate/{id}':
    head:
      tags:
        - tbl_smstemplate
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_smstemplate.exists__head_tbl_smstemplate_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_smstemplate
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_smstemplate.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
    put:
      tags:
        - tbl_smstemplate
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_smstemplate.replaceById__put_tbl_smstemplate_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
    delete:
      tags:
        - tbl_smstemplate
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_smstemplate.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_smstemplate
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_smstemplate.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_smstemplate id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  '/tbl_smstemplate/{id}/replace':
    post:
      tags:
        - tbl_smstemplate
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_smstemplate.replaceById__post_tbl_smstemplate_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  /tbl_smstemplate/findOne:
    get:
      tags:
        - tbl_smstemplate
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_smstemplate.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_smstemplate'
      deprecated: false
  /tbl_smstemplate/update:
    post:
      tags:
        - tbl_smstemplate
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_smstemplate.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_smstemplate'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_smstemplate/count:
    get:
      tags:
        - tbl_smstemplate
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_smstemplate.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_smstemplate/change-stream:
    post:
      tags:
        - tbl_smstemplate
      summary: Create a change stream.
      operationId: tbl_smstemplate.createChangeStream__post_tbl_smstemplate_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_smstemplate
      summary: Create a change stream.
      operationId: tbl_smstemplate.createChangeStream__get_tbl_smstemplate_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /guarantors:
    post:
      tags:
        - guarantors
      summary: Create a new instance of the model and persist it into the data source.
      operationId: guarantors.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    patch:
      tags:
        - guarantors
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: guarantors.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    put:
      tags:
        - guarantors
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantors.replaceOrCreate__put_guarantors
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    get:
      tags:
        - guarantors
      summary: Find all instances of the model matched by filter from the data source.
      operationId: guarantors.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantors'
      deprecated: false
  /guarantors/replaceOrCreate:
    post:
      tags:
        - guarantors
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantors.replaceOrCreate__post_guarantors_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  /guarantors/upsertWithWhere:
    post:
      tags:
        - guarantors
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: guarantors.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  '/guarantors/{id}/exists':
    get:
      tags:
        - guarantors
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantors.exists__get_guarantors_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/guarantors/{id}':
    head:
      tags:
        - guarantors
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantors.exists__head_guarantors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - guarantors
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: guarantors.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    put:
      tags:
        - guarantors
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantors.replaceById__put_guarantors_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
    delete:
      tags:
        - guarantors
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: guarantors.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - guarantors
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: guarantors.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: guarantors id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  '/guarantors/{id}/replace':
    post:
      tags:
        - guarantors
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantors.replaceById__post_guarantors_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  /guarantors/findOne:
    get:
      tags:
        - guarantors
      summary: Find first instance of the model matched by filter from the data source.
      operationId: guarantors.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantors'
      deprecated: false
  /guarantors/update:
    post:
      tags:
        - guarantors
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: guarantors.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantors'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /guarantors/count:
    get:
      tags:
        - guarantors
      summary: Count instances of the model matched by where from the data source.
      operationId: guarantors.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /guarantors/change-stream:
    post:
      tags:
        - guarantors
      summary: Create a change stream.
      operationId: guarantors.createChangeStream__post_guarantors_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - guarantors
      summary: Create a change stream.
      operationId: guarantors.createChangeStream__get_guarantors_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /guarantordetails:
    post:
      tags:
        - guarantordetails
      summary: Create a new instance of the model and persist it into the data source.
      operationId: guarantordetails.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    patch:
      tags:
        - guarantordetails
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: guarantordetails.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    put:
      tags:
        - guarantordetails
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantordetails.replaceOrCreate__put_guarantordetails
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    get:
      tags:
        - guarantordetails
      summary: Find all instances of the model matched by filter from the data source.
      operationId: guarantordetails.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
  /guarantordetails/replaceOrCreate:
    post:
      tags:
        - guarantordetails
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantordetails.replaceOrCreate__post_guarantordetails_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  /guarantordetails/upsertWithWhere:
    post:
      tags:
        - guarantordetails
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: guarantordetails.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/guarantordetails/{id}/exists':
    get:
      tags:
        - guarantordetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantordetails.exists__get_guarantordetails_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/guarantordetails/{id}':
    head:
      tags:
        - guarantordetails
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantordetails.exists__head_guarantordetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - guarantordetails
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: guarantordetails.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    put:
      tags:
        - guarantordetails
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantordetails.replaceById__put_guarantordetails_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - guarantordetails
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: guarantordetails.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - guarantordetails
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: guarantordetails.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: guarantordetails id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/guarantordetails/{id}/replace':
    post:
      tags:
        - guarantordetails
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantordetails.replaceById__post_guarantordetails_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  /guarantordetails/findOne:
    get:
      tags:
        - guarantordetails
      summary: Find first instance of the model matched by filter from the data source.
      operationId: guarantordetails.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  /guarantordetails/update:
    post:
      tags:
        - guarantordetails
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: guarantordetails.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /guarantordetails/count:
    get:
      tags:
        - guarantordetails
      summary: Count instances of the model matched by where from the data source.
      operationId: guarantordetails.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /guarantordetails/change-stream:
    post:
      tags:
        - guarantordetails
      summary: Create a change stream.
      operationId: guarantordetails.createChangeStream__post_guarantordetails_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - guarantordetails
      summary: Create a change stream.
      operationId: guarantordetails.createChangeStream__get_guarantordetails_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /guarantordetails/total:
    get:
      tags:
        - guarantordetails
      operationId: guarantordetails.total
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /guarantorletters:
    post:
      tags:
        - guarantorletters
      summary: Create a new instance of the model and persist it into the data source.
      operationId: guarantorletters.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
    patch:
      tags:
        - guarantorletters
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: guarantorletters.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
    put:
      tags:
        - guarantorletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantorletters.replaceOrCreate__put_guarantorletters
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
    get:
      tags:
        - guarantorletters
      summary: Find all instances of the model matched by filter from the data source.
      operationId: guarantorletters.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantorletters'
      deprecated: false
  /guarantorletters/replaceOrCreate:
    post:
      tags:
        - guarantorletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: guarantorletters.replaceOrCreate__post_guarantorletters_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
  /guarantorletters/upsertWithWhere:
    post:
      tags:
        - guarantorletters
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: guarantorletters.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
  '/guarantorletters/{id}/exists':
    get:
      tags:
        - guarantorletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantorletters.exists__get_guarantorletters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/guarantorletters/{id}':
    head:
      tags:
        - guarantorletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'guarantorletters.exists__head_guarantorletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - guarantorletters
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: guarantorletters.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
    put:
      tags:
        - guarantorletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantorletters.replaceById__put_guarantorletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
    delete:
      tags:
        - guarantorletters
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: guarantorletters.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - guarantorletters
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: guarantorletters.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: guarantorletters id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
  '/guarantorletters/{id}/replace':
    post:
      tags:
        - guarantorletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'guarantorletters.replaceById__post_guarantorletters_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
  /guarantorletters/findOne:
    get:
      tags:
        - guarantorletters
      summary: Find first instance of the model matched by filter from the data source.
      operationId: guarantorletters.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantorletters'
      deprecated: false
  /guarantorletters/update:
    post:
      tags:
        - guarantorletters
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: guarantorletters.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/guarantorletters'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /guarantorletters/count:
    get:
      tags:
        - guarantorletters
      summary: Count instances of the model matched by where from the data source.
      operationId: guarantorletters.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /guarantorletters/change-stream:
    post:
      tags:
        - guarantorletters
      summary: Create a change stream.
      operationId: guarantorletters.createChangeStream__post_guarantorletters_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - guarantorletters
      summary: Create a change stream.
      operationId: guarantorletters.createChangeStream__get_guarantorletters_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tblusers:
    post:
      tags:
        - tblusers
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tblusers.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
    patch:
      tags:
        - tblusers
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tblusers.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
    put:
      tags:
        - tblusers
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tblusers.replaceOrCreate__put_tblusers
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
    get:
      tags:
        - tblusers
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tblusers.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tblusers'
      deprecated: false
  /tblusers/replaceOrCreate:
    post:
      tags:
        - tblusers
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tblusers.replaceOrCreate__post_tblusers_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
  /tblusers/upsertWithWhere:
    post:
      tags:
        - tblusers
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tblusers.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
  '/tblusers/{id}/exists':
    get:
      tags:
        - tblusers
      summary: Check whether a model instance exists in the data source.
      operationId: 'tblusers.exists__get_tblusers_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tblusers/{id}':
    head:
      tags:
        - tblusers
      summary: Check whether a model instance exists in the data source.
      operationId: 'tblusers.exists__head_tblusers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tblusers
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tblusers.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
    put:
      tags:
        - tblusers
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tblusers.replaceById__put_tblusers_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
    delete:
      tags:
        - tblusers
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tblusers.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tblusers
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tblusers.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tblusers id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
  '/tblusers/{id}/replace':
    post:
      tags:
        - tblusers
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tblusers.replaceById__post_tblusers_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
  /tblusers/findOne:
    get:
      tags:
        - tblusers
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tblusers.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblusers'
      deprecated: false
  /tblusers/update:
    post:
      tags:
        - tblusers
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tblusers.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblusers'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tblusers/count:
    get:
      tags:
        - tblusers
      summary: Count instances of the model matched by where from the data source.
      operationId: tblusers.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tblusers/change-stream:
    post:
      tags:
        - tblusers
      summary: Create a change stream.
      operationId: tblusers.createChangeStream__post_tblusers_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tblusers
      summary: Create a change stream.
      operationId: tblusers.createChangeStream__get_tblusers_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tblusers/search:
    get:
      tags:
        - tblusers
      operationId: tblusers.search
      parameters:
        - name: username
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /permissionsettings:
    post:
      tags:
        - permissionsettings
      summary: Create a new instance of the model and persist it into the data source.
      operationId: permissionsettings.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
    patch:
      tags:
        - permissionsettings
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: permissionsettings.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
    put:
      tags:
        - permissionsettings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: permissionsettings.replaceOrCreate__put_permissionsettings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
    get:
      tags:
        - permissionsettings
      summary: Find all instances of the model matched by filter from the data source.
      operationId: permissionsettings.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/permissionsettings'
      deprecated: false
  /permissionsettings/replaceOrCreate:
    post:
      tags:
        - permissionsettings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        permissionsettings.replaceOrCreate__post_permissionsettings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
  /permissionsettings/upsertWithWhere:
    post:
      tags:
        - permissionsettings
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: permissionsettings.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
  '/permissionsettings/{id}/exists':
    get:
      tags:
        - permissionsettings
      summary: Check whether a model instance exists in the data source.
      operationId: 'permissionsettings.exists__get_permissionsettings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/permissionsettings/{id}':
    head:
      tags:
        - permissionsettings
      summary: Check whether a model instance exists in the data source.
      operationId: 'permissionsettings.exists__head_permissionsettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - permissionsettings
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: permissionsettings.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
    put:
      tags:
        - permissionsettings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'permissionsettings.replaceById__put_permissionsettings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
    delete:
      tags:
        - permissionsettings
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: permissionsettings.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - permissionsettings
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: permissionsettings.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: permissionsettings id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
  '/permissionsettings/{id}/replace':
    post:
      tags:
        - permissionsettings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'permissionsettings.replaceById__post_permissionsettings_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
  /permissionsettings/findOne:
    get:
      tags:
        - permissionsettings
      summary: Find first instance of the model matched by filter from the data source.
      operationId: permissionsettings.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/permissionsettings'
      deprecated: false
  /permissionsettings/update:
    post:
      tags:
        - permissionsettings
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: permissionsettings.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/permissionsettings'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /permissionsettings/count:
    get:
      tags:
        - permissionsettings
      summary: Count instances of the model matched by where from the data source.
      operationId: permissionsettings.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /permissionsettings/change-stream:
    post:
      tags:
        - permissionsettings
      summary: Create a change stream.
      operationId: >-
        permissionsettings.createChangeStream__post_permissionsettings_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - permissionsettings
      summary: Create a change stream.
      operationId: >-
        permissionsettings.createChangeStream__get_permissionsettings_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /permissionsettings/setpermission:
    post:
      tags:
        - permissionsettings
      summary: update permissions for the role
      operationId: permissionsettings.setpermission
      parameters:
        - name: msg
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
      deprecated: false
  /uploads:
    post:
      tags:
        - uploads
      summary: Create a new instance of the model and persist it into the data source.
      operationId: uploads.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
    patch:
      tags:
        - uploads
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: uploads.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
    put:
      tags:
        - uploads
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: uploads.replaceOrCreate__put_uploads
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
    get:
      tags:
        - uploads
      summary: Find all instances of the model matched by filter from the data source.
      operationId: uploads.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/uploads'
      deprecated: false
  /uploads/replaceOrCreate:
    post:
      tags:
        - uploads
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: uploads.replaceOrCreate__post_uploads_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
  /uploads/upsertWithWhere:
    post:
      tags:
        - uploads
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: uploads.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
  '/uploads/{id}/exists':
    get:
      tags:
        - uploads
      summary: Check whether a model instance exists in the data source.
      operationId: 'uploads.exists__get_uploads_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/uploads/{id}':
    head:
      tags:
        - uploads
      summary: Check whether a model instance exists in the data source.
      operationId: 'uploads.exists__head_uploads_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - uploads
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: uploads.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
    put:
      tags:
        - uploads
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'uploads.replaceById__put_uploads_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
    delete:
      tags:
        - uploads
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: uploads.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - uploads
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: uploads.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: uploads id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
  '/uploads/{id}/replace':
    post:
      tags:
        - uploads
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'uploads.replaceById__post_uploads_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
  /uploads/findOne:
    get:
      tags:
        - uploads
      summary: Find first instance of the model matched by filter from the data source.
      operationId: uploads.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/uploads'
      deprecated: false
  /uploads/update:
    post:
      tags:
        - uploads
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: uploads.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/uploads'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /uploads/count:
    get:
      tags:
        - uploads
      summary: Count instances of the model matched by where from the data source.
      operationId: uploads.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /uploads/change-stream:
    post:
      tags:
        - uploads
      summary: Create a change stream.
      operationId: uploads.createChangeStream__post_uploads_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - uploads
      summary: Create a change stream.
      operationId: uploads.createChangeStream__get_uploads_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /activitylogs:
    post:
      tags:
        - activitylogs
      summary: Create a new instance of the model and persist it into the data source.
      operationId: activitylogs.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
    patch:
      tags:
        - activitylogs
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: activitylogs.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
    put:
      tags:
        - activitylogs
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: activitylogs.replaceOrCreate__put_activitylogs
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
    get:
      tags:
        - activitylogs
      summary: Find all instances of the model matched by filter from the data source.
      operationId: activitylogs.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/activitylogs'
      deprecated: false
  /activitylogs/replaceOrCreate:
    post:
      tags:
        - activitylogs
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: activitylogs.replaceOrCreate__post_activitylogs_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
  /activitylogs/upsertWithWhere:
    post:
      tags:
        - activitylogs
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: activitylogs.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
  '/activitylogs/{id}/exists':
    get:
      tags:
        - activitylogs
      summary: Check whether a model instance exists in the data source.
      operationId: 'activitylogs.exists__get_activitylogs_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/activitylogs/{id}':
    head:
      tags:
        - activitylogs
      summary: Check whether a model instance exists in the data source.
      operationId: 'activitylogs.exists__head_activitylogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - activitylogs
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: activitylogs.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
    put:
      tags:
        - activitylogs
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'activitylogs.replaceById__put_activitylogs_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
    delete:
      tags:
        - activitylogs
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: activitylogs.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - activitylogs
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: activitylogs.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: activitylogs id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
  '/activitylogs/{id}/replace':
    post:
      tags:
        - activitylogs
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'activitylogs.replaceById__post_activitylogs_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
  /activitylogs/findOne:
    get:
      tags:
        - activitylogs
      summary: Find first instance of the model matched by filter from the data source.
      operationId: activitylogs.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylogs'
      deprecated: false
  /activitylogs/update:
    post:
      tags:
        - activitylogs
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: activitylogs.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylogs'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /activitylogs/count:
    get:
      tags:
        - activitylogs
      summary: Count instances of the model matched by where from the data source.
      operationId: activitylogs.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /activitylogs/change-stream:
    post:
      tags:
        - activitylogs
      summary: Create a change stream.
      operationId: activitylogs.createChangeStream__post_activitylogs_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - activitylogs
      summary: Create a change stream.
      operationId: activitylogs.createChangeStream__get_activitylogs_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /activitylogs/action:
    post:
      tags:
        - activitylogs
      operationId: activitylogs.action
      parameters:
        - name: msg
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /cmdstatus:
    post:
      tags:
        - cmdstatus
      summary: Create a new instance of the model and persist it into the data source.
      operationId: cmdstatus.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
    patch:
      tags:
        - cmdstatus
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: cmdstatus.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
    put:
      tags:
        - cmdstatus
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cmdstatus.replaceOrCreate__put_cmdstatus
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
    get:
      tags:
        - cmdstatus
      summary: Find all instances of the model matched by filter from the data source.
      operationId: cmdstatus.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/cmdstatus'
      deprecated: false
  /cmdstatus/replaceOrCreate:
    post:
      tags:
        - cmdstatus
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cmdstatus.replaceOrCreate__post_cmdstatus_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
  /cmdstatus/upsertWithWhere:
    post:
      tags:
        - cmdstatus
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: cmdstatus.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
  '/cmdstatus/{id}/exists':
    get:
      tags:
        - cmdstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'cmdstatus.exists__get_cmdstatus_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/cmdstatus/{id}':
    head:
      tags:
        - cmdstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'cmdstatus.exists__head_cmdstatus_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - cmdstatus
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: cmdstatus.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
    put:
      tags:
        - cmdstatus
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cmdstatus.replaceById__put_cmdstatus_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
    delete:
      tags:
        - cmdstatus
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: cmdstatus.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - cmdstatus
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: cmdstatus.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: cmdstatus id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
  '/cmdstatus/{id}/replace':
    post:
      tags:
        - cmdstatus
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cmdstatus.replaceById__post_cmdstatus_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
  /cmdstatus/findOne:
    get:
      tags:
        - cmdstatus
      summary: Find first instance of the model matched by filter from the data source.
      operationId: cmdstatus.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cmdstatus'
      deprecated: false
  /cmdstatus/update:
    post:
      tags:
        - cmdstatus
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: cmdstatus.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cmdstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /cmdstatus/count:
    get:
      tags:
        - cmdstatus
      summary: Count instances of the model matched by where from the data source.
      operationId: cmdstatus.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cmdstatus/change-stream:
    post:
      tags:
        - cmdstatus
      summary: Create a change stream.
      operationId: cmdstatus.createChangeStream__post_cmdstatus_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - cmdstatus
      summary: Create a change stream.
      operationId: cmdstatus.createChangeStream__get_cmdstatus_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /branchstatus:
    post:
      tags:
        - branchstatus
      summary: Create a new instance of the model and persist it into the data source.
      operationId: branchstatus.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
    patch:
      tags:
        - branchstatus
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: branchstatus.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
    put:
      tags:
        - branchstatus
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: branchstatus.replaceOrCreate__put_branchstatus
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
    get:
      tags:
        - branchstatus
      summary: Find all instances of the model matched by filter from the data source.
      operationId: branchstatus.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/branchstatus'
      deprecated: false
  /branchstatus/replaceOrCreate:
    post:
      tags:
        - branchstatus
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: branchstatus.replaceOrCreate__post_branchstatus_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
  /branchstatus/upsertWithWhere:
    post:
      tags:
        - branchstatus
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: branchstatus.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
  '/branchstatus/{id}/exists':
    get:
      tags:
        - branchstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'branchstatus.exists__get_branchstatus_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/branchstatus/{id}':
    head:
      tags:
        - branchstatus
      summary: Check whether a model instance exists in the data source.
      operationId: 'branchstatus.exists__head_branchstatus_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - branchstatus
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: branchstatus.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
    put:
      tags:
        - branchstatus
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'branchstatus.replaceById__put_branchstatus_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
    delete:
      tags:
        - branchstatus
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: branchstatus.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - branchstatus
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: branchstatus.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: branchstatus id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
  '/branchstatus/{id}/replace':
    post:
      tags:
        - branchstatus
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'branchstatus.replaceById__post_branchstatus_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
  /branchstatus/findOne:
    get:
      tags:
        - branchstatus
      summary: Find first instance of the model matched by filter from the data source.
      operationId: branchstatus.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branchstatus'
      deprecated: false
  /branchstatus/update:
    post:
      tags:
        - branchstatus
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: branchstatus.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branchstatus'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /branchstatus/count:
    get:
      tags:
        - branchstatus
      summary: Count instances of the model matched by where from the data source.
      operationId: branchstatus.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /branchstatus/change-stream:
    post:
      tags:
        - branchstatus
      summary: Create a change stream.
      operationId: branchstatus.createChangeStream__post_branchstatus_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - branchstatus
      summary: Create a change stream.
      operationId: branchstatus.createChangeStream__get_branchstatus_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/tbl_portfolio_static/{id}/guarantors/{fk}':
    get:
      tags:
        - tbl_portfolio_static
      summary: Find a related item by id for guarantors.
      operationId: tbl_portfolio_static.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tbl_portfolio_static
      summary: Delete a related item by id for guarantors.
      operationId: tbl_portfolio_static.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tbl_portfolio_static
      summary: Update a related item by id for guarantors.
      operationId: tbl_portfolio_static.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/tbl_portfolio_static/{id}/demandsdues/{fk}':
    get:
      tags:
        - tbl_portfolio_static
      summary: Find a related item by id for demandsdues.
      operationId: tbl_portfolio_static.prototype.__findById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tbl_portfolio_static
      summary: Delete a related item by id for demandsdues.
      operationId: tbl_portfolio_static.prototype.__destroyById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tbl_portfolio_static
      summary: Update a related item by id for demandsdues.
      operationId: tbl_portfolio_static.prototype.__updateById__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/tbl_portfolio_static/{id}/guarantors':
    get:
      tags:
        - tbl_portfolio_static
      summary: Queries guarantors of tbl_portfolio_static.
      operationId: tbl_portfolio_static.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - tbl_portfolio_static
      summary: Creates a new instance in guarantors of this model.
      operationId: tbl_portfolio_static.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tbl_portfolio_static
      summary: Deletes all guarantors of this model.
      operationId: tbl_portfolio_static.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tbl_portfolio_static/{id}/guarantors/count':
    get:
      tags:
        - tbl_portfolio_static
      summary: Counts guarantors of tbl_portfolio_static.
      operationId: tbl_portfolio_static.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/tbl_portfolio_static/{id}/demandsdues':
    get:
      tags:
        - tbl_portfolio_static
      summary: Queries demandsdues of tbl_portfolio_static.
      operationId: tbl_portfolio_static.prototype.__get__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsdue'
      deprecated: false
    post:
      tags:
        - tbl_portfolio_static
      summary: Creates a new instance in demandsdues of this model.
      operationId: tbl_portfolio_static.prototype.__create__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tbl_portfolio_static
      summary: Deletes all demandsdues of this model.
      operationId: tbl_portfolio_static.prototype.__delete__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tbl_portfolio_static/{id}/demandsdues/count':
    get:
      tags:
        - tbl_portfolio_static
      summary: Counts demandsdues of tbl_portfolio_static.
      operationId: tbl_portfolio_static.prototype.__count__demandsdues
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_portfolio_static:
    post:
      tags:
        - tbl_portfolio_static
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_portfolio_static.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
    patch:
      tags:
        - tbl_portfolio_static
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_portfolio_static.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
    put:
      tags:
        - tbl_portfolio_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_portfolio_static.replaceOrCreate__put_tbl_portfolio_static
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
    get:
      tags:
        - tbl_portfolio_static
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_portfolio_static.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  /tbl_portfolio_static/replaceOrCreate:
    post:
      tags:
        - tbl_portfolio_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        tbl_portfolio_static.replaceOrCreate__post_tbl_portfolio_static_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  /tbl_portfolio_static/upsertWithWhere:
    post:
      tags:
        - tbl_portfolio_static
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_portfolio_static.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  '/tbl_portfolio_static/{id}/exists':
    get:
      tags:
        - tbl_portfolio_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_portfolio_static.exists__get_tbl_portfolio_static_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_portfolio_static/{id}':
    head:
      tags:
        - tbl_portfolio_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_portfolio_static.exists__head_tbl_portfolio_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_portfolio_static
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_portfolio_static.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
    put:
      tags:
        - tbl_portfolio_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_portfolio_static.replaceById__put_tbl_portfolio_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
    delete:
      tags:
        - tbl_portfolio_static
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_portfolio_static.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_portfolio_static
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_portfolio_static.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_portfolio_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  '/tbl_portfolio_static/{id}/replace':
    post:
      tags:
        - tbl_portfolio_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_portfolio_static.replaceById__post_tbl_portfolio_static_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  /tbl_portfolio_static/findOne:
    get:
      tags:
        - tbl_portfolio_static
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_portfolio_static.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_portfolio_static'
      deprecated: false
  /tbl_portfolio_static/update:
    post:
      tags:
        - tbl_portfolio_static
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_portfolio_static.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_portfolio_static'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_portfolio_static/count:
    get:
      tags:
        - tbl_portfolio_static
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_portfolio_static.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_portfolio_static/change-stream:
    post:
      tags:
        - tbl_portfolio_static
      summary: Create a change stream.
      operationId: >-
        tbl_portfolio_static.createChangeStream__post_tbl_portfolio_static_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_portfolio_static
      summary: Create a change stream.
      operationId: >-
        tbl_portfolio_static.createChangeStream__get_tbl_portfolio_static_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /ptps:
    post:
      tags:
        - ptps
      summary: Create a new instance of the model and persist it into the data source.
      operationId: ptps.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
    patch:
      tags:
        - ptps
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: ptps.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
    put:
      tags:
        - ptps
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ptps.replaceOrCreate__put_ptps
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
    get:
      tags:
        - ptps
      summary: Find all instances of the model matched by filter from the data source.
      operationId: ptps.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/ptps'
      deprecated: false
  /ptps/replaceOrCreate:
    post:
      tags:
        - ptps
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: ptps.replaceOrCreate__post_ptps_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
  /ptps/upsertWithWhere:
    post:
      tags:
        - ptps
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: ptps.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
  '/ptps/{id}/exists':
    get:
      tags:
        - ptps
      summary: Check whether a model instance exists in the data source.
      operationId: 'ptps.exists__get_ptps_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/ptps/{id}':
    head:
      tags:
        - ptps
      summary: Check whether a model instance exists in the data source.
      operationId: 'ptps.exists__head_ptps_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - ptps
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: ptps.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
    put:
      tags:
        - ptps
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ptps.replaceById__put_ptps_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
    delete:
      tags:
        - ptps
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: ptps.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - ptps
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: ptps.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: ptps id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
  '/ptps/{id}/replace':
    post:
      tags:
        - ptps
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'ptps.replaceById__post_ptps_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
  /ptps/findOne:
    get:
      tags:
        - ptps
      summary: Find first instance of the model matched by filter from the data source.
      operationId: ptps.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/ptps'
      deprecated: false
  /ptps/update:
    post:
      tags:
        - ptps
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: ptps.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/ptps'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /ptps/count:
    get:
      tags:
        - ptps
      summary: Count instances of the model matched by where from the data source.
      operationId: ptps.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /ptps/change-stream:
    post:
      tags:
        - ptps
      summary: Create a change stream.
      operationId: ptps.createChangeStream__post_ptps_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - ptps
      summary: Create a change stream.
      operationId: ptps.createChangeStream__get_ptps_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /teles:
    post:
      tags:
        - teles
      summary: Create a new instance of the model and persist it into the data source.
      operationId: teles.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
    patch:
      tags:
        - teles
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: teles.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
    put:
      tags:
        - teles
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: teles.replaceOrCreate__put_teles
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
    get:
      tags:
        - teles
      summary: Find all instances of the model matched by filter from the data source.
      operationId: teles.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/teles'
      deprecated: false
  /teles/replaceOrCreate:
    post:
      tags:
        - teles
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: teles.replaceOrCreate__post_teles_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
  /teles/upsertWithWhere:
    post:
      tags:
        - teles
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: teles.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
  '/teles/{id}/exists':
    get:
      tags:
        - teles
      summary: Check whether a model instance exists in the data source.
      operationId: 'teles.exists__get_teles_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/teles/{id}':
    head:
      tags:
        - teles
      summary: Check whether a model instance exists in the data source.
      operationId: 'teles.exists__head_teles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - teles
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: teles.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
    put:
      tags:
        - teles
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'teles.replaceById__put_teles_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
    delete:
      tags:
        - teles
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: teles.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - teles
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: teles.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: teles id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
  '/teles/{id}/replace':
    post:
      tags:
        - teles
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'teles.replaceById__post_teles_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
  /teles/findOne:
    get:
      tags:
        - teles
      summary: Find first instance of the model matched by filter from the data source.
      operationId: teles.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/teles'
      deprecated: false
  /teles/update:
    post:
      tags:
        - teles
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: teles.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/teles'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /teles/count:
    get:
      tags:
        - teles
      summary: Count instances of the model matched by where from the data source.
      operationId: teles.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /teles/change-stream:
    post:
      tags:
        - teles
      summary: Create a change stream.
      operationId: teles.createChangeStream__post_teles_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - teles
      summary: Create a change stream.
      operationId: teles.createChangeStream__get_teles_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /teles/total:
    get:
      tags:
        - teles
      operationId: teles.total
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /teles/alltele:
    get:
      tags:
        - teles
      operationId: teles.alltele
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tblcard_static:
    post:
      tags:
        - tblcard_static
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tblcard_static.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    patch:
      tags:
        - tblcard_static
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tblcard_static.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    put:
      tags:
        - tblcard_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tblcard_static.replaceOrCreate__put_tblcard_static
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    get:
      tags:
        - tblcard_static
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tblcard_static.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tblcard_static'
      deprecated: false
  /tblcard_static/replaceOrCreate:
    post:
      tags:
        - tblcard_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tblcard_static.replaceOrCreate__post_tblcard_static_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
  /tblcard_static/upsertWithWhere:
    post:
      tags:
        - tblcard_static
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tblcard_static.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
  '/tblcard_static/{id}/exists':
    get:
      tags:
        - tblcard_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'tblcard_static.exists__get_tblcard_static_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tblcard_static/{id}':
    head:
      tags:
        - tblcard_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'tblcard_static.exists__head_tblcard_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tblcard_static
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tblcard_static.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    put:
      tags:
        - tblcard_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tblcard_static.replaceById__put_tblcard_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
    delete:
      tags:
        - tblcard_static
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tblcard_static.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tblcard_static
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tblcard_static.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tblcard_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
  '/tblcard_static/{id}/replace':
    post:
      tags:
        - tblcard_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tblcard_static.replaceById__post_tblcard_static_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
  /tblcard_static/findOne:
    get:
      tags:
        - tblcard_static
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tblcard_static.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tblcard_static'
      deprecated: false
  /tblcard_static/update:
    post:
      tags:
        - tblcard_static
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tblcard_static.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tblcard_static'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tblcard_static/count:
    get:
      tags:
        - tblcard_static
      summary: Count instances of the model matched by where from the data source.
      operationId: tblcard_static.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tblcard_static/change-stream:
    post:
      tags:
        - tblcard_static
      summary: Create a change stream.
      operationId: tblcard_static.createChangeStream__post_tblcard_static_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tblcard_static
      summary: Create a change stream.
      operationId: tblcard_static.createChangeStream__get_tblcard_static_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /global_letter_settings:
    post:
      tags:
        - global_letter_settings
      summary: Create a new instance of the model and persist it into the data source.
      operationId: global_letter_settings.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
    patch:
      tags:
        - global_letter_settings
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: global_letter_settings.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
    put:
      tags:
        - global_letter_settings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: global_letter_settings.replaceOrCreate__put_global_letter_settings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
    get:
      tags:
        - global_letter_settings
      summary: Find all instances of the model matched by filter from the data source.
      operationId: global_letter_settings.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/global_letter_settings'
      deprecated: false
  /global_letter_settings/replaceOrCreate:
    post:
      tags:
        - global_letter_settings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        global_letter_settings.replaceOrCreate__post_global_letter_settings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
  /global_letter_settings/upsertWithWhere:
    post:
      tags:
        - global_letter_settings
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: global_letter_settings.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
  '/global_letter_settings/{id}/exists':
    get:
      tags:
        - global_letter_settings
      summary: Check whether a model instance exists in the data source.
      operationId: 'global_letter_settings.exists__get_global_letter_settings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/global_letter_settings/{id}':
    head:
      tags:
        - global_letter_settings
      summary: Check whether a model instance exists in the data source.
      operationId: 'global_letter_settings.exists__head_global_letter_settings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - global_letter_settings
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: global_letter_settings.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
    put:
      tags:
        - global_letter_settings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'global_letter_settings.replaceById__put_global_letter_settings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
    delete:
      tags:
        - global_letter_settings
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: global_letter_settings.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - global_letter_settings
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: global_letter_settings.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: global_letter_settings id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
  '/global_letter_settings/{id}/replace':
    post:
      tags:
        - global_letter_settings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: >-
        global_letter_settings.replaceById__post_global_letter_settings_{id}_replace
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
  /global_letter_settings/findOne:
    get:
      tags:
        - global_letter_settings
      summary: Find first instance of the model matched by filter from the data source.
      operationId: global_letter_settings.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/global_letter_settings'
      deprecated: false
  /global_letter_settings/update:
    post:
      tags:
        - global_letter_settings
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: global_letter_settings.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/global_letter_settings'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /global_letter_settings/count:
    get:
      tags:
        - global_letter_settings
      summary: Count instances of the model matched by where from the data source.
      operationId: global_letter_settings.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /global_letter_settings/change-stream:
    post:
      tags:
        - global_letter_settings
      summary: Create a change stream.
      operationId: >-
        global_letter_settings.createChangeStream__post_global_letter_settings_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - global_letter_settings
      summary: Create a change stream.
      operationId: >-
        global_letter_settings.createChangeStream__get_global_letter_settings_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /autoletters:
    post:
      tags:
        - autoletters
      summary: Create a new instance of the model and persist it into the data source.
      operationId: autoletters.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
    patch:
      tags:
        - autoletters
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: autoletters.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
    put:
      tags:
        - autoletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: autoletters.replaceOrCreate__put_autoletters
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
    get:
      tags:
        - autoletters
      summary: Find all instances of the model matched by filter from the data source.
      operationId: autoletters.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/autoletters'
      deprecated: false
  /autoletters/replaceOrCreate:
    post:
      tags:
        - autoletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: autoletters.replaceOrCreate__post_autoletters_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
  /autoletters/upsertWithWhere:
    post:
      tags:
        - autoletters
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: autoletters.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
  '/autoletters/{id}/exists':
    get:
      tags:
        - autoletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'autoletters.exists__get_autoletters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/autoletters/{id}':
    head:
      tags:
        - autoletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'autoletters.exists__head_autoletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - autoletters
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: autoletters.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
    put:
      tags:
        - autoletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'autoletters.replaceById__put_autoletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
    delete:
      tags:
        - autoletters
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: autoletters.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - autoletters
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: autoletters.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: autoletters id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
  '/autoletters/{id}/replace':
    post:
      tags:
        - autoletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'autoletters.replaceById__post_autoletters_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
  /autoletters/findOne:
    get:
      tags:
        - autoletters
      summary: Find first instance of the model matched by filter from the data source.
      operationId: autoletters.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/autoletters'
      deprecated: false
  /autoletters/update:
    post:
      tags:
        - autoletters
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: autoletters.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/autoletters'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /autoletters/count:
    get:
      tags:
        - autoletters
      summary: Count instances of the model matched by where from the data source.
      operationId: autoletters.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /autoletters/change-stream:
    post:
      tags:
        - autoletters
      summary: Create a change stream.
      operationId: autoletters.createChangeStream__post_autoletters_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - autoletters
      summary: Create a change stream.
      operationId: autoletters.createChangeStream__get_autoletters_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /autoletters/insertorupdate:
    post:
      tags:
        - autoletters
      operationId: autoletters.insertorupdate
      parameters:
        - name: msg
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /autoletters/checkduplicate:
    post:
      tags:
        - autoletters
      operationId: autoletters.checkduplicate
      parameters:
        - name: msgIn
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/mcoopcash_static/{id}/guarantors':
    get:
      tags:
        - mcoopcash_static
      summary: Fetches hasOne relation guarantors.
      operationId: mcoopcash_static.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: mcoopcash_static id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    post:
      tags:
        - mcoopcash_static
      summary: Creates a new instance in guarantors of this model.
      operationId: mcoopcash_static.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: mcoopcash_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    put:
      tags:
        - mcoopcash_static
      summary: Update guarantors of this model.
      operationId: mcoopcash_static.prototype.__update__guarantors
      parameters:
        - name: id
          in: path
          description: mcoopcash_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    delete:
      tags:
        - mcoopcash_static
      summary: Deletes guarantors of this model.
      operationId: mcoopcash_static.prototype.__destroy__guarantors
      parameters:
        - name: id
          in: path
          description: mcoopcash_static id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /mcoopcash_static:
    post:
      tags:
        - mcoopcash_static
      summary: Create a new instance of the model and persist it into the data source.
      operationId: mcoopcash_static.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    patch:
      tags:
        - mcoopcash_static
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_static.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    put:
      tags:
        - mcoopcash_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_static.replaceOrCreate__put_mcoopcash_static
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    get:
      tags:
        - mcoopcash_static
      summary: Find all instances of the model matched by filter from the data source.
      operationId: mcoopcash_static.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  /mcoopcash_static/replaceOrCreate:
    post:
      tags:
        - mcoopcash_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_static.replaceOrCreate__post_mcoopcash_static_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  /mcoopcash_static/upsertWithWhere:
    post:
      tags:
        - mcoopcash_static
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: mcoopcash_static.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  '/mcoopcash_static/{id}/exists':
    get:
      tags:
        - mcoopcash_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'mcoopcash_static.exists__get_mcoopcash_static_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/mcoopcash_static/{id}':
    head:
      tags:
        - mcoopcash_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'mcoopcash_static.exists__head_mcoopcash_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - mcoopcash_static
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: mcoopcash_static.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    put:
      tags:
        - mcoopcash_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'mcoopcash_static.replaceById__put_mcoopcash_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    delete:
      tags:
        - mcoopcash_static
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: mcoopcash_static.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - mcoopcash_static
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: mcoopcash_static.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: mcoopcash_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  '/mcoopcash_static/{id}/replace':
    post:
      tags:
        - mcoopcash_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'mcoopcash_static.replaceById__post_mcoopcash_static_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  /mcoopcash_static/findOne:
    get:
      tags:
        - mcoopcash_static
      summary: Find first instance of the model matched by filter from the data source.
      operationId: mcoopcash_static.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
  /mcoopcash_static/update:
    post:
      tags:
        - mcoopcash_static
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: mcoopcash_static.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /mcoopcash_static/count:
    get:
      tags:
        - mcoopcash_static
      summary: Count instances of the model matched by where from the data source.
      operationId: mcoopcash_static.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /mcoopcash_static/change-stream:
    post:
      tags:
        - mcoopcash_static
      summary: Create a change stream.
      operationId: mcoopcash_static.createChangeStream__post_mcoopcash_static_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - mcoopcash_static
      summary: Create a change stream.
      operationId: mcoopcash_static.createChangeStream__get_mcoopcash_static_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/mcoopcash_stage/{id}/mcoopcash_static':
    get:
      tags:
        - mcoopcash_stage
      summary: Fetches hasOne relation mcoopcash_static.
      operationId: mcoopcash_stage.prototype.__get__mcoopcash_static
      parameters:
        - name: id
          in: path
          description: mcoopcash_stage id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    post:
      tags:
        - mcoopcash_stage
      summary: Creates a new instance in mcoopcash_static of this model.
      operationId: mcoopcash_stage.prototype.__create__mcoopcash_static
      parameters:
        - name: id
          in: path
          description: mcoopcash_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    put:
      tags:
        - mcoopcash_stage
      summary: Update mcoopcash_static of this model.
      operationId: mcoopcash_stage.prototype.__update__mcoopcash_static
      parameters:
        - name: id
          in: path
          description: mcoopcash_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/mcoopcash_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_static'
      deprecated: false
    delete:
      tags:
        - mcoopcash_stage
      summary: Deletes mcoopcash_static of this model.
      operationId: mcoopcash_stage.prototype.__destroy__mcoopcash_static
      parameters:
        - name: id
          in: path
          description: mcoopcash_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /mcoopcash_stage:
    post:
      tags:
        - mcoopcash_stage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: mcoopcash_stage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    patch:
      tags:
        - mcoopcash_stage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_stage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    put:
      tags:
        - mcoopcash_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_stage.replaceOrCreate__put_mcoopcash_stage
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    get:
      tags:
        - mcoopcash_stage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: mcoopcash_stage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  /mcoopcash_stage/replaceOrCreate:
    post:
      tags:
        - mcoopcash_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: mcoopcash_stage.replaceOrCreate__post_mcoopcash_stage_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  /mcoopcash_stage/upsertWithWhere:
    post:
      tags:
        - mcoopcash_stage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: mcoopcash_stage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  '/mcoopcash_stage/{id}/exists':
    get:
      tags:
        - mcoopcash_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'mcoopcash_stage.exists__get_mcoopcash_stage_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/mcoopcash_stage/{id}':
    head:
      tags:
        - mcoopcash_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'mcoopcash_stage.exists__head_mcoopcash_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - mcoopcash_stage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: mcoopcash_stage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    put:
      tags:
        - mcoopcash_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'mcoopcash_stage.replaceById__put_mcoopcash_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
    delete:
      tags:
        - mcoopcash_stage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: mcoopcash_stage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - mcoopcash_stage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: mcoopcash_stage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: mcoopcash_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  '/mcoopcash_stage/{id}/replace':
    post:
      tags:
        - mcoopcash_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'mcoopcash_stage.replaceById__post_mcoopcash_stage_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  /mcoopcash_stage/findOne:
    get:
      tags:
        - mcoopcash_stage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: mcoopcash_stage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/mcoopcash_stage'
      deprecated: false
  /mcoopcash_stage/update:
    post:
      tags:
        - mcoopcash_stage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: mcoopcash_stage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/mcoopcash_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /mcoopcash_stage/count:
    get:
      tags:
        - mcoopcash_stage
      summary: Count instances of the model matched by where from the data source.
      operationId: mcoopcash_stage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /mcoopcash_stage/change-stream:
    post:
      tags:
        - mcoopcash_stage
      summary: Create a change stream.
      operationId: mcoopcash_stage.createChangeStream__post_mcoopcash_stage_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - mcoopcash_stage
      summary: Create a change stream.
      operationId: mcoopcash_stage.createChangeStream__get_mcoopcash_stage_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /mcoopcash_stage/search:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /mcoopcash_stage/totalviewall:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.totalviewall
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /mcoopcash_stage/totalmyworklist:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.totalmyworklist
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /mcoopcash_stage/totalmyallocation:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.totalmyallocation
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /mcoopcash_stage/worklist:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.worklist
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /mcoopcash_stage/myallocations:
    get:
      tags:
        - mcoopcash_stage
      operationId: mcoopcash_stage.myallocations
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /customersuspensions:
    post:
      tags:
        - customersuspensions
      summary: Create a new instance of the model and persist it into the data source.
      operationId: customersuspensions.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
    patch:
      tags:
        - customersuspensions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: customersuspensions.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
    put:
      tags:
        - customersuspensions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: customersuspensions.replaceOrCreate__put_customersuspensions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
    get:
      tags:
        - customersuspensions
      summary: Find all instances of the model matched by filter from the data source.
      operationId: customersuspensions.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/customersuspensions'
      deprecated: false
  /customersuspensions/replaceOrCreate:
    post:
      tags:
        - customersuspensions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        customersuspensions.replaceOrCreate__post_customersuspensions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
  /customersuspensions/upsertWithWhere:
    post:
      tags:
        - customersuspensions
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: customersuspensions.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
  '/customersuspensions/{id}/exists':
    get:
      tags:
        - customersuspensions
      summary: Check whether a model instance exists in the data source.
      operationId: 'customersuspensions.exists__get_customersuspensions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/customersuspensions/{id}':
    head:
      tags:
        - customersuspensions
      summary: Check whether a model instance exists in the data source.
      operationId: 'customersuspensions.exists__head_customersuspensions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - customersuspensions
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: customersuspensions.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
    put:
      tags:
        - customersuspensions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'customersuspensions.replaceById__put_customersuspensions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
    delete:
      tags:
        - customersuspensions
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: customersuspensions.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - customersuspensions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: customersuspensions.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: customersuspensions id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
  '/customersuspensions/{id}/replace':
    post:
      tags:
        - customersuspensions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'customersuspensions.replaceById__post_customersuspensions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
  /customersuspensions/findOne:
    get:
      tags:
        - customersuspensions
      summary: Find first instance of the model matched by filter from the data source.
      operationId: customersuspensions.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/customersuspensions'
      deprecated: false
  /customersuspensions/update:
    post:
      tags:
        - customersuspensions
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: customersuspensions.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/customersuspensions'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /customersuspensions/count:
    get:
      tags:
        - customersuspensions
      summary: Count instances of the model matched by where from the data source.
      operationId: customersuspensions.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /customersuspensions/change-stream:
    post:
      tags:
        - customersuspensions
      summary: Create a change stream.
      operationId: >-
        customersuspensions.createChangeStream__post_customersuspensions_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - customersuspensions
      summary: Create a change stream.
      operationId: >-
        customersuspensions.createChangeStream__get_customersuspensions_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  '/tqall/{id}/guarantors/{fk}':
    get:
      tags:
        - tqall
      summary: Find a related item by id for guarantors.
      operationId: tqall.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tqall
      summary: Delete a related item by id for guarantors.
      operationId: tqall.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tqall
      summary: Update a related item by id for guarantors.
      operationId: tqall.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/tqall/{id}/demandsdues/{fk}':
    get:
      tags:
        - tqall
      summary: Find a related item by id for demandsdues.
      operationId: tqall.prototype.__findById__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tqall
      summary: Delete a related item by id for demandsdues.
      operationId: tqall.prototype.__destroyById__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - tqall
      summary: Update a related item by id for demandsdues.
      operationId: tqall.prototype.__updateById__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/tqall/{id}/guarantors':
    get:
      tags:
        - tqall
      summary: Queries guarantors of tqall.
      operationId: tqall.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - tqall
      summary: Creates a new instance in guarantors of this model.
      operationId: tqall.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - tqall
      summary: Deletes all guarantors of this model.
      operationId: tqall.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tqall/{id}/guarantors/count':
    get:
      tags:
        - tqall
      summary: Counts guarantors of tqall.
      operationId: tqall.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/tqall/{id}/demandsdues':
    get:
      tags:
        - tqall
      summary: Queries demandsdues of tqall.
      operationId: tqall.prototype.__get__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsdue'
      deprecated: false
    post:
      tags:
        - tqall
      summary: Creates a new instance in demandsdues of this model.
      operationId: tqall.prototype.__create__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - tqall
      summary: Deletes all demandsdues of this model.
      operationId: tqall.prototype.__delete__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/tqall/{id}/demandsdues/count':
    get:
      tags:
        - tqall
      summary: Counts demandsdues of tqall.
      operationId: tqall.prototype.__count__demandsdues
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tqall:
    post:
      tags:
        - tqall
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tqall.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
    patch:
      tags:
        - tqall
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tqall.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
    put:
      tags:
        - tqall
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tqall.replaceOrCreate__put_tqall
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
    get:
      tags:
        - tqall
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tqall.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tqall'
      deprecated: false
  /tqall/replaceOrCreate:
    post:
      tags:
        - tqall
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tqall.replaceOrCreate__post_tqall_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
  /tqall/upsertWithWhere:
    post:
      tags:
        - tqall
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tqall.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
  '/tqall/{id}/exists':
    get:
      tags:
        - tqall
      summary: Check whether a model instance exists in the data source.
      operationId: 'tqall.exists__get_tqall_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tqall/{id}':
    head:
      tags:
        - tqall
      summary: Check whether a model instance exists in the data source.
      operationId: 'tqall.exists__head_tqall_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tqall
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tqall.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
    put:
      tags:
        - tqall
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tqall.replaceById__put_tqall_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
    delete:
      tags:
        - tqall
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tqall.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tqall
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tqall.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tqall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
  '/tqall/{id}/replace':
    post:
      tags:
        - tqall
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tqall.replaceById__post_tqall_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
  /tqall/findOne:
    get:
      tags:
        - tqall
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tqall.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tqall'
      deprecated: false
  /tqall/update:
    post:
      tags:
        - tqall
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tqall.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tqall'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tqall/count:
    get:
      tags:
        - tqall
      summary: Count instances of the model matched by where from the data source.
      operationId: tqall.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tqall/change-stream:
    post:
      tags:
        - tqall
      summary: Create a change stream.
      operationId: tqall.createChangeStream__post_tqall_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tqall
      summary: Create a change stream.
      operationId: tqall.createChangeStream__get_tqall_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tqall/total:
    get:
      tags:
        - tqall
      operationId: tqall.total
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tqall/search:
    get:
      tags:
        - tqall
      operationId: tqall.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /tqall/searchwithoutloanods:
    get:
      tags:
        - tqall
      operationId: tqall.searchwithoutloanods
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /tqall/paged:
    get:
      tags:
        - tqall
      operationId: tqall.paged
      parameters:
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tqall/paged/myallocation:
    get:
      tags:
        - tqall
      operationId: tqall.pagedmyallocation
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/qall/{id}/guarantors/{fk}':
    get:
      tags:
        - qall
      summary: Find a related item by id for guarantors.
      operationId: qall.prototype.__findById__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - qall
      summary: Delete a related item by id for guarantors.
      operationId: qall.prototype.__destroyById__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - qall
      summary: Update a related item by id for guarantors.
      operationId: qall.prototype.__updateById__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for guarantors
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
  '/qall/{id}/demandsdues/{fk}':
    get:
      tags:
        - qall
      summary: Find a related item by id for demandsdues.
      operationId: qall.prototype.__findById__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - qall
      summary: Delete a related item by id for demandsdues.
      operationId: qall.prototype.__destroyById__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
    put:
      tags:
        - qall
      summary: Update a related item by id for demandsdues.
      operationId: qall.prototype.__updateById__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: fk
          in: path
          description: Foreign key for demandsdues
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
  '/qall/{id}/guarantors':
    get:
      tags:
        - qall
      summary: Queries guarantors of qall.
      operationId: qall.prototype.__get__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/guarantordetails'
      deprecated: false
    post:
      tags:
        - qall
      summary: Creates a new instance in guarantors of this model.
      operationId: qall.prototype.__create__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/guarantordetails'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/guarantordetails'
      deprecated: false
    delete:
      tags:
        - qall
      summary: Deletes all guarantors of this model.
      operationId: qall.prototype.__delete__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/qall/{id}/guarantors/count':
    get:
      tags:
        - qall
      summary: Counts guarantors of qall.
      operationId: qall.prototype.__count__guarantors
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  '/qall/{id}/demandsdues':
    get:
      tags:
        - qall
      summary: Queries demandsdues of qall.
      operationId: qall.prototype.__get__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/demandsdue'
      deprecated: false
    post:
      tags:
        - qall
      summary: Creates a new instance in demandsdues of this model.
      operationId: qall.prototype.__create__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/demandsdue'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/demandsdue'
      deprecated: false
    delete:
      tags:
        - qall
      summary: Deletes all demandsdues of this model.
      operationId: qall.prototype.__delete__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  '/qall/{id}/demandsdues/count':
    get:
      tags:
        - qall
      summary: Counts demandsdues of qall.
      operationId: qall.prototype.__count__demandsdues
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qall:
    post:
      tags:
        - qall
      summary: Create a new instance of the model and persist it into the data source.
      operationId: qall.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
    patch:
      tags:
        - qall
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: qall.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
    put:
      tags:
        - qall
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qall.replaceOrCreate__put_qall
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
    get:
      tags:
        - qall
      summary: Find all instances of the model matched by filter from the data source.
      operationId: qall.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/qall'
      deprecated: false
  /qall/replaceOrCreate:
    post:
      tags:
        - qall
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qall.replaceOrCreate__post_qall_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
  /qall/upsertWithWhere:
    post:
      tags:
        - qall
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: qall.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
  '/qall/{id}/exists':
    get:
      tags:
        - qall
      summary: Check whether a model instance exists in the data source.
      operationId: 'qall.exists__get_qall_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/qall/{id}':
    head:
      tags:
        - qall
      summary: Check whether a model instance exists in the data source.
      operationId: 'qall.exists__head_qall_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - qall
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: qall.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
    put:
      tags:
        - qall
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qall.replaceById__put_qall_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
    delete:
      tags:
        - qall
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: qall.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - qall
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: qall.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: qall id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
  '/qall/{id}/replace':
    post:
      tags:
        - qall
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qall.replaceById__post_qall_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
  /qall/findOne:
    get:
      tags:
        - qall
      summary: Find first instance of the model matched by filter from the data source.
      operationId: qall.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qall'
      deprecated: false
  /qall/update:
    post:
      tags:
        - qall
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: qall.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qall'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /qall/count:
    get:
      tags:
        - qall
      summary: Count instances of the model matched by where from the data source.
      operationId: qall.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qall/change-stream:
    post:
      tags:
        - qall
      summary: Create a change stream.
      operationId: qall.createChangeStream__post_qall_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - qall
      summary: Create a change stream.
      operationId: qall.createChangeStream__get_qall_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /qall/total:
    get:
      tags:
        - qall
      operationId: qall.total
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /qall/search:
    get:
      tags:
        - qall
      operationId: qall.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /qall/paged:
    get:
      tags:
        - qall
      operationId: qall.paged
      parameters:
        - name: page
          in: query
          required: false
          type: number
          format: double
        - name: limit
          in: query
          required: false
          type: number
          format: double
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /activitylog:
    post:
      tags:
        - activitylog
      summary: Create a new instance of the model and persist it into the data source.
      operationId: activitylog.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
    patch:
      tags:
        - activitylog
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: activitylog.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
    put:
      tags:
        - activitylog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: activitylog.replaceOrCreate__put_activitylog
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
    get:
      tags:
        - activitylog
      summary: Find all instances of the model matched by filter from the data source.
      operationId: activitylog.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/activitylog'
      deprecated: false
  /activitylog/replaceOrCreate:
    post:
      tags:
        - activitylog
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: activitylog.replaceOrCreate__post_activitylog_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
  /activitylog/upsertWithWhere:
    post:
      tags:
        - activitylog
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: activitylog.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
  '/activitylog/{id}/exists':
    get:
      tags:
        - activitylog
      summary: Check whether a model instance exists in the data source.
      operationId: 'activitylog.exists__get_activitylog_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/activitylog/{id}':
    head:
      tags:
        - activitylog
      summary: Check whether a model instance exists in the data source.
      operationId: 'activitylog.exists__head_activitylog_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - activitylog
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: activitylog.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
    put:
      tags:
        - activitylog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'activitylog.replaceById__put_activitylog_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
    delete:
      tags:
        - activitylog
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: activitylog.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - activitylog
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: activitylog.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: activitylog id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
  '/activitylog/{id}/replace':
    post:
      tags:
        - activitylog
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'activitylog.replaceById__post_activitylog_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
  /activitylog/findOne:
    get:
      tags:
        - activitylog
      summary: Find first instance of the model matched by filter from the data source.
      operationId: activitylog.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/activitylog'
      deprecated: false
  /activitylog/update:
    post:
      tags:
        - activitylog
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: activitylog.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/activitylog'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /activitylog/count:
    get:
      tags:
        - activitylog
      summary: Count instances of the model matched by where from the data source.
      operationId: activitylog.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /activitylog/change-stream:
    post:
      tags:
        - activitylog
      summary: Create a change stream.
      operationId: activitylog.createChangeStream__post_activitylog_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - activitylog
      summary: Create a change stream.
      operationId: activitylog.createChangeStream__get_activitylog_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /activitylog/action:
    post:
      tags:
        - activitylog
      operationId: activitylog.action
      parameters:
        - name: msg
          in: body
          required: false
          schema:
            type: object
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /cure:
    post:
      tags:
        - cure
      summary: Create a new instance of the model and persist it into the data source.
      operationId: cure.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
    patch:
      tags:
        - cure
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: cure.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
    put:
      tags:
        - cure
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cure.replaceOrCreate__put_cure
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
    get:
      tags:
        - cure
      summary: Find all instances of the model matched by filter from the data source.
      operationId: cure.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/cure'
      deprecated: false
  /cure/replaceOrCreate:
    post:
      tags:
        - cure
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cure.replaceOrCreate__post_cure_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
  /cure/upsertWithWhere:
    post:
      tags:
        - cure
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: cure.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
  '/cure/{id}/exists':
    get:
      tags:
        - cure
      summary: Check whether a model instance exists in the data source.
      operationId: 'cure.exists__get_cure_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/cure/{id}':
    head:
      tags:
        - cure
      summary: Check whether a model instance exists in the data source.
      operationId: 'cure.exists__head_cure_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - cure
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: cure.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
    put:
      tags:
        - cure
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cure.replaceById__put_cure_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
    delete:
      tags:
        - cure
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: cure.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - cure
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: cure.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: cure id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
  '/cure/{id}/replace':
    post:
      tags:
        - cure
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cure.replaceById__post_cure_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
  /cure/findOne:
    get:
      tags:
        - cure
      summary: Find first instance of the model matched by filter from the data source.
      operationId: cure.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cure'
      deprecated: false
  /cure/update:
    post:
      tags:
        - cure
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: cure.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cure'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /cure/count:
    get:
      tags:
        - cure
      summary: Count instances of the model matched by where from the data source.
      operationId: cure.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cure/change-stream:
    post:
      tags:
        - cure
      summary: Create a change stream.
      operationId: cure.createChangeStream__post_cure_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - cure
      summary: Create a change stream.
      operationId: cure.createChangeStream__get_cure_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /party:
    post:
      tags:
        - party
      summary: Create a new instance of the model and persist it into the data source.
      operationId: party.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
    patch:
      tags:
        - party
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: party.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
    put:
      tags:
        - party
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: party.replaceOrCreate__put_party
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
    get:
      tags:
        - party
      summary: Find all instances of the model matched by filter from the data source.
      operationId: party.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/party'
      deprecated: false
  /party/replaceOrCreate:
    post:
      tags:
        - party
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: party.replaceOrCreate__post_party_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
  /party/upsertWithWhere:
    post:
      tags:
        - party
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: party.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
  '/party/{id}/exists':
    get:
      tags:
        - party
      summary: Check whether a model instance exists in the data source.
      operationId: 'party.exists__get_party_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/party/{id}':
    head:
      tags:
        - party
      summary: Check whether a model instance exists in the data source.
      operationId: 'party.exists__head_party_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - party
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: party.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
    put:
      tags:
        - party
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'party.replaceById__put_party_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
    delete:
      tags:
        - party
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: party.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - party
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: party.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: party id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
  '/party/{id}/replace':
    post:
      tags:
        - party
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'party.replaceById__post_party_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
  /party/findOne:
    get:
      tags:
        - party
      summary: Find first instance of the model matched by filter from the data source.
      operationId: party.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/party'
      deprecated: false
  /party/update:
    post:
      tags:
        - party
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: party.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/party'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /party/count:
    get:
      tags:
        - party
      summary: Count instances of the model matched by where from the data source.
      operationId: party.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /party/change-stream:
    post:
      tags:
        - party
      summary: Create a change stream.
      operationId: party.createChangeStream__post_party_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - party
      summary: Create a change stream.
      operationId: party.createChangeStream__get_party_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /excuse:
    post:
      tags:
        - excuse
      summary: Create a new instance of the model and persist it into the data source.
      operationId: excuse.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
    patch:
      tags:
        - excuse
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: excuse.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
    put:
      tags:
        - excuse
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: excuse.replaceOrCreate__put_excuse
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
    get:
      tags:
        - excuse
      summary: Find all instances of the model matched by filter from the data source.
      operationId: excuse.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/excuse'
      deprecated: false
  /excuse/replaceOrCreate:
    post:
      tags:
        - excuse
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: excuse.replaceOrCreate__post_excuse_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
  /excuse/upsertWithWhere:
    post:
      tags:
        - excuse
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: excuse.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
  '/excuse/{id}/exists':
    get:
      tags:
        - excuse
      summary: Check whether a model instance exists in the data source.
      operationId: 'excuse.exists__get_excuse_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/excuse/{id}':
    head:
      tags:
        - excuse
      summary: Check whether a model instance exists in the data source.
      operationId: 'excuse.exists__head_excuse_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - excuse
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: excuse.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
    put:
      tags:
        - excuse
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'excuse.replaceById__put_excuse_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
    delete:
      tags:
        - excuse
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: excuse.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - excuse
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: excuse.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: excuse id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
  '/excuse/{id}/replace':
    post:
      tags:
        - excuse
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'excuse.replaceById__post_excuse_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
  /excuse/findOne:
    get:
      tags:
        - excuse
      summary: Find first instance of the model matched by filter from the data source.
      operationId: excuse.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/excuse'
      deprecated: false
  /excuse/update:
    post:
      tags:
        - excuse
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: excuse.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/excuse'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /excuse/count:
    get:
      tags:
        - excuse
      summary: Count instances of the model matched by where from the data source.
      operationId: excuse.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /excuse/change-stream:
    post:
      tags:
        - excuse
      summary: Create a change stream.
      operationId: excuse.createChangeStream__post_excuse_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - excuse
      summary: Create a change stream.
      operationId: excuse.createChangeStream__get_excuse_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /collectoraction:
    post:
      tags:
        - collectoraction
      summary: Create a new instance of the model and persist it into the data source.
      operationId: collectoraction.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
    patch:
      tags:
        - collectoraction
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: collectoraction.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
    put:
      tags:
        - collectoraction
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: collectoraction.replaceOrCreate__put_collectoraction
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
    get:
      tags:
        - collectoraction
      summary: Find all instances of the model matched by filter from the data source.
      operationId: collectoraction.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/collectoraction'
      deprecated: false
  /collectoraction/replaceOrCreate:
    post:
      tags:
        - collectoraction
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: collectoraction.replaceOrCreate__post_collectoraction_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
  /collectoraction/upsertWithWhere:
    post:
      tags:
        - collectoraction
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: collectoraction.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
  '/collectoraction/{id}/exists':
    get:
      tags:
        - collectoraction
      summary: Check whether a model instance exists in the data source.
      operationId: 'collectoraction.exists__get_collectoraction_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/collectoraction/{id}':
    head:
      tags:
        - collectoraction
      summary: Check whether a model instance exists in the data source.
      operationId: 'collectoraction.exists__head_collectoraction_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - collectoraction
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: collectoraction.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
    put:
      tags:
        - collectoraction
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'collectoraction.replaceById__put_collectoraction_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
    delete:
      tags:
        - collectoraction
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: collectoraction.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - collectoraction
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: collectoraction.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: collectoraction id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
  '/collectoraction/{id}/replace':
    post:
      tags:
        - collectoraction
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'collectoraction.replaceById__post_collectoraction_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
  /collectoraction/findOne:
    get:
      tags:
        - collectoraction
      summary: Find first instance of the model matched by filter from the data source.
      operationId: collectoraction.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/collectoraction'
      deprecated: false
  /collectoraction/update:
    post:
      tags:
        - collectoraction
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: collectoraction.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/collectoraction'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /collectoraction/count:
    get:
      tags:
        - collectoraction
      summary: Count instances of the model matched by where from the data source.
      operationId: collectoraction.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /collectoraction/change-stream:
    post:
      tags:
        - collectoraction
      summary: Create a change stream.
      operationId: collectoraction.createChangeStream__post_collectoraction_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - collectoraction
      summary: Create a change stream.
      operationId: collectoraction.createChangeStream__get_collectoraction_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /deptcollateral:
    post:
      tags:
        - deptcollateral
      summary: Create a new instance of the model and persist it into the data source.
      operationId: deptcollateral.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
    patch:
      tags:
        - deptcollateral
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: deptcollateral.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
    put:
      tags:
        - deptcollateral
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: deptcollateral.replaceOrCreate__put_deptcollateral
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
    get:
      tags:
        - deptcollateral
      summary: Find all instances of the model matched by filter from the data source.
      operationId: deptcollateral.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/deptcollateral'
      deprecated: false
  /deptcollateral/replaceOrCreate:
    post:
      tags:
        - deptcollateral
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: deptcollateral.replaceOrCreate__post_deptcollateral_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
  /deptcollateral/upsertWithWhere:
    post:
      tags:
        - deptcollateral
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: deptcollateral.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
  '/deptcollateral/{id}/exists':
    get:
      tags:
        - deptcollateral
      summary: Check whether a model instance exists in the data source.
      operationId: 'deptcollateral.exists__get_deptcollateral_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/deptcollateral/{id}':
    head:
      tags:
        - deptcollateral
      summary: Check whether a model instance exists in the data source.
      operationId: 'deptcollateral.exists__head_deptcollateral_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - deptcollateral
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: deptcollateral.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
    put:
      tags:
        - deptcollateral
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'deptcollateral.replaceById__put_deptcollateral_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
    delete:
      tags:
        - deptcollateral
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: deptcollateral.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - deptcollateral
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: deptcollateral.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: deptcollateral id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
  '/deptcollateral/{id}/replace':
    post:
      tags:
        - deptcollateral
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'deptcollateral.replaceById__post_deptcollateral_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
  /deptcollateral/findOne:
    get:
      tags:
        - deptcollateral
      summary: Find first instance of the model matched by filter from the data source.
      operationId: deptcollateral.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/deptcollateral'
      deprecated: false
  /deptcollateral/update:
    post:
      tags:
        - deptcollateral
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: deptcollateral.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/deptcollateral'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /deptcollateral/count:
    get:
      tags:
        - deptcollateral
      summary: Count instances of the model matched by where from the data source.
      operationId: deptcollateral.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /deptcollateral/change-stream:
    post:
      tags:
        - deptcollateral
      summary: Create a change stream.
      operationId: deptcollateral.createChangeStream__post_deptcollateral_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - deptcollateral
      summary: Create a change stream.
      operationId: deptcollateral.createChangeStream__get_deptcollateral_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /deptcollateral/total:
    get:
      tags:
        - deptcollateral
      operationId: deptcollateral.total
      parameters:
        - name: custnumber
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /notifications:
    post:
      tags:
        - notifications
      summary: Create a new instance of the model and persist it into the data source.
      operationId: notifications.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
    patch:
      tags:
        - notifications
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: notifications.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
    put:
      tags:
        - notifications
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: notifications.replaceOrCreate__put_notifications
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
    get:
      tags:
        - notifications
      summary: Find all instances of the model matched by filter from the data source.
      operationId: notifications.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/notifications'
      deprecated: false
  /notifications/replaceOrCreate:
    post:
      tags:
        - notifications
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: notifications.replaceOrCreate__post_notifications_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
  /notifications/upsertWithWhere:
    post:
      tags:
        - notifications
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: notifications.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
  '/notifications/{id}/exists':
    get:
      tags:
        - notifications
      summary: Check whether a model instance exists in the data source.
      operationId: 'notifications.exists__get_notifications_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/notifications/{id}':
    head:
      tags:
        - notifications
      summary: Check whether a model instance exists in the data source.
      operationId: 'notifications.exists__head_notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - notifications
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: notifications.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
    put:
      tags:
        - notifications
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'notifications.replaceById__put_notifications_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
    delete:
      tags:
        - notifications
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: notifications.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - notifications
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: notifications.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: notifications id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
  '/notifications/{id}/replace':
    post:
      tags:
        - notifications
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'notifications.replaceById__post_notifications_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
  /notifications/findOne:
    get:
      tags:
        - notifications
      summary: Find first instance of the model matched by filter from the data source.
      operationId: notifications.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/notifications'
      deprecated: false
  /notifications/update:
    post:
      tags:
        - notifications
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: notifications.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/notifications'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /notifications/count:
    get:
      tags:
        - notifications
      summary: Count instances of the model matched by where from the data source.
      operationId: notifications.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /notifications/change-stream:
    post:
      tags:
        - notifications
      summary: Create a change stream.
      operationId: notifications.createChangeStream__post_notifications_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - notifications
      summary: Create a change stream.
      operationId: notifications.createChangeStream__get_notifications_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /qallcards:
    post:
      tags:
        - qallcards
      summary: Create a new instance of the model and persist it into the data source.
      operationId: qallcards.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
    patch:
      tags:
        - qallcards
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: qallcards.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
    put:
      tags:
        - qallcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qallcards.replaceOrCreate__put_qallcards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
    get:
      tags:
        - qallcards
      summary: Find all instances of the model matched by filter from the data source.
      operationId: qallcards.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/qallcards'
      deprecated: false
  /qallcards/replaceOrCreate:
    post:
      tags:
        - qallcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qallcards.replaceOrCreate__post_qallcards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
  /qallcards/upsertWithWhere:
    post:
      tags:
        - qallcards
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: qallcards.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
  '/qallcards/{id}/exists':
    get:
      tags:
        - qallcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'qallcards.exists__get_qallcards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/qallcards/{id}':
    head:
      tags:
        - qallcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'qallcards.exists__head_qallcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - qallcards
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: qallcards.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
    put:
      tags:
        - qallcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qallcards.replaceById__put_qallcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
    delete:
      tags:
        - qallcards
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: qallcards.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - qallcards
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: qallcards.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: qallcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
  '/qallcards/{id}/replace':
    post:
      tags:
        - qallcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qallcards.replaceById__post_qallcards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
  /qallcards/findOne:
    get:
      tags:
        - qallcards
      summary: Find first instance of the model matched by filter from the data source.
      operationId: qallcards.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qallcards'
      deprecated: false
  /qallcards/update:
    post:
      tags:
        - qallcards
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: qallcards.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qallcards'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /qallcards/count:
    get:
      tags:
        - qallcards
      summary: Count instances of the model matched by where from the data source.
      operationId: qallcards.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qallcards/change-stream:
    post:
      tags:
        - qallcards
      summary: Create a change stream.
      operationId: qallcards.createChangeStream__post_qallcards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - qallcards
      summary: Create a change stream.
      operationId: qallcards.createChangeStream__get_qallcards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /memos:
    post:
      tags:
        - memos
      summary: Create a new instance of the model and persist it into the data source.
      operationId: memos.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
    patch:
      tags:
        - memos
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: memos.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
    put:
      tags:
        - memos
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: memos.replaceOrCreate__put_memos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
    get:
      tags:
        - memos
      summary: Find all instances of the model matched by filter from the data source.
      operationId: memos.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/memos'
      deprecated: false
  /memos/replaceOrCreate:
    post:
      tags:
        - memos
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: memos.replaceOrCreate__post_memos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
  /memos/upsertWithWhere:
    post:
      tags:
        - memos
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: memos.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
  '/memos/{id}/exists':
    get:
      tags:
        - memos
      summary: Check whether a model instance exists in the data source.
      operationId: 'memos.exists__get_memos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/memos/{id}':
    head:
      tags:
        - memos
      summary: Check whether a model instance exists in the data source.
      operationId: 'memos.exists__head_memos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - memos
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: memos.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
    put:
      tags:
        - memos
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'memos.replaceById__put_memos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
    delete:
      tags:
        - memos
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: memos.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - memos
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: memos.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: memos id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
  '/memos/{id}/replace':
    post:
      tags:
        - memos
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'memos.replaceById__post_memos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
  /memos/findOne:
    get:
      tags:
        - memos
      summary: Find first instance of the model matched by filter from the data source.
      operationId: memos.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/memos'
      deprecated: false
  /memos/update:
    post:
      tags:
        - memos
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: memos.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/memos'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /memos/count:
    get:
      tags:
        - memos
      summary: Count instances of the model matched by where from the data source.
      operationId: memos.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /memos/change-stream:
    post:
      tags:
        - memos
      summary: Create a change stream.
      operationId: memos.createChangeStream__post_memos_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - memos
      summary: Create a change stream.
      operationId: memos.createChangeStream__get_memos_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /memos/all:
    get:
      tags:
        - memos
      operationId: memos.all
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards:
    post:
      tags:
        - tcards
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tcards.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
    patch:
      tags:
        - tcards
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tcards.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
    put:
      tags:
        - tcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tcards.replaceOrCreate__put_tcards
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
    get:
      tags:
        - tcards
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tcards.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tcards'
      deprecated: false
  /tcards/replaceOrCreate:
    post:
      tags:
        - tcards
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tcards.replaceOrCreate__post_tcards_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
  /tcards/upsertWithWhere:
    post:
      tags:
        - tcards
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tcards.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
  '/tcards/{id}/exists':
    get:
      tags:
        - tcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'tcards.exists__get_tcards_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tcards/{id}':
    head:
      tags:
        - tcards
      summary: Check whether a model instance exists in the data source.
      operationId: 'tcards.exists__head_tcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tcards
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tcards.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
    put:
      tags:
        - tcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tcards.replaceById__put_tcards_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
    delete:
      tags:
        - tcards
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tcards.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tcards
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tcards.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tcards id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
  '/tcards/{id}/replace':
    post:
      tags:
        - tcards
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tcards.replaceById__post_tcards_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
  /tcards/findOne:
    get:
      tags:
        - tcards
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tcards.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tcards'
      deprecated: false
  /tcards/update:
    post:
      tags:
        - tcards
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tcards.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tcards'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tcards/count:
    get:
      tags:
        - tcards
      summary: Count instances of the model matched by where from the data source.
      operationId: tcards.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tcards/change-stream:
    post:
      tags:
        - tcards
      summary: Create a change stream.
      operationId: tcards.createChangeStream__post_tcards_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tcards
      summary: Create a change stream.
      operationId: tcards.createChangeStream__get_tcards_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tcards/search:
    get:
      tags:
        - tcards
      operationId: tcards.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /tcards/totalcreditcardsearch:
    get:
      tags:
        - tcards
      operationId: tcards.totalcreditcardsearch
      parameters:
        - name: searchstring
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/totalviewall:
    get:
      tags:
        - tcards
      operationId: tcards.totalviewall
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/searchall:
    get:
      tags:
        - tcards
      operationId: tcards.searchall
      parameters:
        - name: searchstring
          in: query
          required: false
          type: string
        - name: pagesize
          in: query
          required: false
          type: string
        - name: currentposition
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/totalmyworklist:
    get:
      tags:
        - tcards
      operationId: tcards.totalmyworklist
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/totalmyallocation:
    get:
      tags:
        - tcards
      operationId: tcards.totalmyallocation
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/worklist:
    get:
      tags:
        - tcards
      operationId: tcards.worklist
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/myallocations:
    get:
      tags:
        - tcards
      operationId: tcards.myallocations
      parameters:
        - name: colofficer
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/closed:
    get:
      tags:
        - tcards
      operationId: tcards.closed
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /tcards/totalclosed:
    get:
      tags:
        - tcards
      operationId: tcards.totalclosed
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /branches:
    post:
      tags:
        - branches
      summary: Create a new instance of the model and persist it into the data source.
      operationId: branches.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
    patch:
      tags:
        - branches
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: branches.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
    put:
      tags:
        - branches
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: branches.replaceOrCreate__put_branches
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
    get:
      tags:
        - branches
      summary: Find all instances of the model matched by filter from the data source.
      operationId: branches.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/branches'
      deprecated: false
  /branches/replaceOrCreate:
    post:
      tags:
        - branches
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: branches.replaceOrCreate__post_branches_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
  /branches/upsertWithWhere:
    post:
      tags:
        - branches
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: branches.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
  '/branches/{id}/exists':
    get:
      tags:
        - branches
      summary: Check whether a model instance exists in the data source.
      operationId: 'branches.exists__get_branches_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/branches/{id}':
    head:
      tags:
        - branches
      summary: Check whether a model instance exists in the data source.
      operationId: 'branches.exists__head_branches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - branches
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: branches.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
    put:
      tags:
        - branches
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'branches.replaceById__put_branches_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
    delete:
      tags:
        - branches
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: branches.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - branches
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: branches.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: branches id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
  '/branches/{id}/replace':
    post:
      tags:
        - branches
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'branches.replaceById__post_branches_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
  /branches/findOne:
    get:
      tags:
        - branches
      summary: Find first instance of the model matched by filter from the data source.
      operationId: branches.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/branches'
      deprecated: false
  /branches/update:
    post:
      tags:
        - branches
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: branches.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/branches'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /branches/count:
    get:
      tags:
        - branches
      summary: Count instances of the model matched by where from the data source.
      operationId: branches.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /branches/change-stream:
    post:
      tags:
        - branches
      summary: Create a change stream.
      operationId: branches.createChangeStream__post_branches_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - branches
      summary: Create a change stream.
      operationId: branches.createChangeStream__get_branches_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /branches/search:
    get:
      tags:
        - branches
      operationId: branches.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  '/cards_watch_stage/{id}/cards_watch_statics':
    get:
      tags:
        - cards_watch_stage
      summary: Fetches hasOne relation cards_watch_statics.
      operationId: cards_watch_stage.prototype.__get__cards_watch_statics
      parameters:
        - name: id
          in: path
          description: cards_watch_stage id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    post:
      tags:
        - cards_watch_stage
      summary: Creates a new instance in cards_watch_statics of this model.
      operationId: cards_watch_stage.prototype.__create__cards_watch_statics
      parameters:
        - name: id
          in: path
          description: cards_watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    put:
      tags:
        - cards_watch_stage
      summary: Update cards_watch_statics of this model.
      operationId: cards_watch_stage.prototype.__update__cards_watch_statics
      parameters:
        - name: id
          in: path
          description: cards_watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    delete:
      tags:
        - cards_watch_stage
      summary: Deletes cards_watch_statics of this model.
      operationId: cards_watch_stage.prototype.__destroy__cards_watch_statics
      parameters:
        - name: id
          in: path
          description: cards_watch_stage id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /cards_watch_stage:
    post:
      tags:
        - cards_watch_stage
      summary: Create a new instance of the model and persist it into the data source.
      operationId: cards_watch_stage.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    patch:
      tags:
        - cards_watch_stage
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: cards_watch_stage.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    put:
      tags:
        - cards_watch_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cards_watch_stage.replaceOrCreate__put_cards_watch_stage
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    get:
      tags:
        - cards_watch_stage
      summary: Find all instances of the model matched by filter from the data source.
      operationId: cards_watch_stage.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  /cards_watch_stage/replaceOrCreate:
    post:
      tags:
        - cards_watch_stage
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        cards_watch_stage.replaceOrCreate__post_cards_watch_stage_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  /cards_watch_stage/upsertWithWhere:
    post:
      tags:
        - cards_watch_stage
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: cards_watch_stage.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  '/cards_watch_stage/{id}/exists':
    get:
      tags:
        - cards_watch_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_watch_stage.exists__get_cards_watch_stage_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/cards_watch_stage/{id}':
    head:
      tags:
        - cards_watch_stage
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_watch_stage.exists__head_cards_watch_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - cards_watch_stage
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: cards_watch_stage.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    put:
      tags:
        - cards_watch_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_watch_stage.replaceById__put_cards_watch_stage_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    delete:
      tags:
        - cards_watch_stage
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: cards_watch_stage.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - cards_watch_stage
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: cards_watch_stage.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: cards_watch_stage id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  '/cards_watch_stage/{id}/replace':
    post:
      tags:
        - cards_watch_stage
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_watch_stage.replaceById__post_cards_watch_stage_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  /cards_watch_stage/findOne:
    get:
      tags:
        - cards_watch_stage
      summary: Find first instance of the model matched by filter from the data source.
      operationId: cards_watch_stage.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
  /cards_watch_stage/update:
    post:
      tags:
        - cards_watch_stage
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: cards_watch_stage.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /cards_watch_stage/count:
    get:
      tags:
        - cards_watch_stage
      summary: Count instances of the model matched by where from the data source.
      operationId: cards_watch_stage.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cards_watch_stage/change-stream:
    post:
      tags:
        - cards_watch_stage
      summary: Create a change stream.
      operationId: >-
        cards_watch_stage.createChangeStream__post_cards_watch_stage_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - cards_watch_stage
      summary: Create a change stream.
      operationId: >-
        cards_watch_stage.createChangeStream__get_cards_watch_stage_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /cards_watch_stage/search:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.search
      parameters:
        - name: searchtext
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
  /cards_watch_stage/totalcardswatch:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.totalcardswatch
      parameters: []
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards_watch_stage/searchtotalcardswatch:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.searchtotalcardswatch
      parameters:
        - name: searchstring
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards_watch_stage/searchcardswatch:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.searchcardswatch
      parameters:
        - name: searchstring
          in: query
          required: false
          type: string
        - name: pagesize
          in: query
          required: false
          type: string
        - name: currentposition
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards_watch_stage/allcards:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.allcards
      parameters:
        - name: pagesize
          in: query
          required: false
          type: string
        - name: currentposition
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  /cards_watch_stage/select_filtered_viewall:
    get:
      tags:
        - cards_watch_stage
      operationId: cards_watch_stage.select_filtered_viewall
      parameters:
        - name: pagesize
          in: query
          required: false
          type: string
        - name: pagenum
          in: query
          required: false
          type: string
        - name: sortdatafield
          in: query
          required: false
          type: string
        - name: sortorder
          in: query
          required: false
          type: string
        - name: filterscount
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
  '/cards_watch_static/{id}/static':
    get:
      tags:
        - cards_watch_static
      summary: Fetches hasOne relation static.
      operationId: cards_watch_static.prototype.__get__static
      parameters:
        - name: id
          in: path
          description: cards_watch_static id
          required: true
          type: string
          format: JSON
        - name: refresh
          in: query
          required: false
          type: boolean
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    post:
      tags:
        - cards_watch_static
      summary: Creates a new instance in static of this model.
      operationId: cards_watch_static.prototype.__create__static
      parameters:
        - name: id
          in: path
          description: cards_watch_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    put:
      tags:
        - cards_watch_static
      summary: Update static of this model.
      operationId: cards_watch_static.prototype.__update__static
      parameters:
        - name: id
          in: path
          description: cards_watch_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          required: false
          schema:
            $ref: '#/definitions/cards_watch_stage'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_stage'
      deprecated: false
    delete:
      tags:
        - cards_watch_static
      summary: Deletes static of this model.
      operationId: cards_watch_static.prototype.__destroy__static
      parameters:
        - name: id
          in: path
          description: cards_watch_static id
          required: true
          type: string
          format: JSON
      responses:
        '204':
          description: Request was successful
      deprecated: false
  /cards_watch_static:
    post:
      tags:
        - cards_watch_static
      summary: Create a new instance of the model and persist it into the data source.
      operationId: cards_watch_static.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    patch:
      tags:
        - cards_watch_static
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: cards_watch_static.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    put:
      tags:
        - cards_watch_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: cards_watch_static.replaceOrCreate__put_cards_watch_static
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    get:
      tags:
        - cards_watch_static
      summary: Find all instances of the model matched by filter from the data source.
      operationId: cards_watch_static.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/cards_watch_static'
      deprecated: false
  /cards_watch_static/replaceOrCreate:
    post:
      tags:
        - cards_watch_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        cards_watch_static.replaceOrCreate__post_cards_watch_static_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
  /cards_watch_static/upsertWithWhere:
    post:
      tags:
        - cards_watch_static
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: cards_watch_static.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
  '/cards_watch_static/{id}/exists':
    get:
      tags:
        - cards_watch_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_watch_static.exists__get_cards_watch_static_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/cards_watch_static/{id}':
    head:
      tags:
        - cards_watch_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'cards_watch_static.exists__head_cards_watch_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - cards_watch_static
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: cards_watch_static.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    put:
      tags:
        - cards_watch_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_watch_static.replaceById__put_cards_watch_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
    delete:
      tags:
        - cards_watch_static
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: cards_watch_static.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - cards_watch_static
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: cards_watch_static.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: cards_watch_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
  '/cards_watch_static/{id}/replace':
    post:
      tags:
        - cards_watch_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'cards_watch_static.replaceById__post_cards_watch_static_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
  /cards_watch_static/findOne:
    get:
      tags:
        - cards_watch_static
      summary: Find first instance of the model matched by filter from the data source.
      operationId: cards_watch_static.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/cards_watch_static'
      deprecated: false
  /cards_watch_static/update:
    post:
      tags:
        - cards_watch_static
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: cards_watch_static.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/cards_watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /cards_watch_static/count:
    get:
      tags:
        - cards_watch_static
      summary: Count instances of the model matched by where from the data source.
      operationId: cards_watch_static.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /cards_watch_static/change-stream:
    post:
      tags:
        - cards_watch_static
      summary: Create a change stream.
      operationId: >-
        cards_watch_static.createChangeStream__post_cards_watch_static_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - cards_watch_static
      summary: Create a change stream.
      operationId: >-
        cards_watch_static.createChangeStream__get_cards_watch_static_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /watch_static:
    post:
      tags:
        - watch_static
      summary: Create a new instance of the model and persist it into the data source.
      operationId: watch_static.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    patch:
      tags:
        - watch_static
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: watch_static.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    put:
      tags:
        - watch_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: watch_static.replaceOrCreate__put_watch_static
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    get:
      tags:
        - watch_static
      summary: Find all instances of the model matched by filter from the data source.
      operationId: watch_static.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/watch_static'
      deprecated: false
  /watch_static/replaceOrCreate:
    post:
      tags:
        - watch_static
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: watch_static.replaceOrCreate__post_watch_static_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
  /watch_static/upsertWithWhere:
    post:
      tags:
        - watch_static
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: watch_static.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
  '/watch_static/{id}/exists':
    get:
      tags:
        - watch_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'watch_static.exists__get_watch_static_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/watch_static/{id}':
    head:
      tags:
        - watch_static
      summary: Check whether a model instance exists in the data source.
      operationId: 'watch_static.exists__head_watch_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - watch_static
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: watch_static.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    put:
      tags:
        - watch_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'watch_static.replaceById__put_watch_static_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
    delete:
      tags:
        - watch_static
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: watch_static.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - watch_static
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: watch_static.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: watch_static id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
  '/watch_static/{id}/replace':
    post:
      tags:
        - watch_static
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'watch_static.replaceById__post_watch_static_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
  /watch_static/findOne:
    get:
      tags:
        - watch_static
      summary: Find first instance of the model matched by filter from the data source.
      operationId: watch_static.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/watch_static'
      deprecated: false
  /watch_static/update:
    post:
      tags:
        - watch_static
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: watch_static.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/watch_static'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /watch_static/count:
    get:
      tags:
        - watch_static
      summary: Count instances of the model matched by where from the data source.
      operationId: watch_static.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /watch_static/change-stream:
    post:
      tags:
        - watch_static
      summary: Create a change stream.
      operationId: watch_static.createChangeStream__post_watch_static_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - watch_static
      summary: Create a change stream.
      operationId: watch_static.createChangeStream__get_watch_static_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_plans:
    post:
      tags:
        - tbl_s_plans
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_plans.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
    patch:
      tags:
        - tbl_s_plans
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_plans.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
    put:
      tags:
        - tbl_s_plans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_plans.replaceOrCreate__put_tbl_s_plans
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
    get:
      tags:
        - tbl_s_plans
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_plans.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  /tbl_s_plans/replaceOrCreate:
    post:
      tags:
        - tbl_s_plans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_plans.replaceOrCreate__post_tbl_s_plans_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  /tbl_s_plans/upsertWithWhere:
    post:
      tags:
        - tbl_s_plans
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_plans.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  '/tbl_s_plans/{id}/exists':
    get:
      tags:
        - tbl_s_plans
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_plans.exists__get_tbl_s_plans_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_plans/{id}':
    head:
      tags:
        - tbl_s_plans
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_plans.exists__head_tbl_s_plans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_plans
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_plans.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
    put:
      tags:
        - tbl_s_plans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_plans.replaceById__put_tbl_s_plans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
    delete:
      tags:
        - tbl_s_plans
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_plans.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_plans
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_plans.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_plans id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  '/tbl_s_plans/{id}/replace':
    post:
      tags:
        - tbl_s_plans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_plans.replaceById__post_tbl_s_plans_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  /tbl_s_plans/findOne:
    get:
      tags:
        - tbl_s_plans
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_plans.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plans'
      deprecated: false
  /tbl_s_plans/update:
    post:
      tags:
        - tbl_s_plans
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_plans.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_plans/count:
    get:
      tags:
        - tbl_s_plans
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_plans.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_plans/change-stream:
    post:
      tags:
        - tbl_s_plans
      summary: Create a change stream.
      operationId: tbl_s_plans.createChangeStream__post_tbl_s_plans_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_plans
      summary: Create a change stream.
      operationId: tbl_s_plans.createChangeStream__get_tbl_s_plans_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_actions:
    post:
      tags:
        - tbl_s_actions
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_actions.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
    patch:
      tags:
        - tbl_s_actions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_actions.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
    put:
      tags:
        - tbl_s_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_actions.replaceOrCreate__put_tbl_s_actions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
    get:
      tags:
        - tbl_s_actions
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_actions.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  /tbl_s_actions/replaceOrCreate:
    post:
      tags:
        - tbl_s_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_actions.replaceOrCreate__post_tbl_s_actions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  /tbl_s_actions/upsertWithWhere:
    post:
      tags:
        - tbl_s_actions
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_actions.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  '/tbl_s_actions/{id}/exists':
    get:
      tags:
        - tbl_s_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_actions.exists__get_tbl_s_actions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_actions/{id}':
    head:
      tags:
        - tbl_s_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_actions.exists__head_tbl_s_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_actions
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_actions.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
    put:
      tags:
        - tbl_s_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_actions.replaceById__put_tbl_s_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
    delete:
      tags:
        - tbl_s_actions
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_actions.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_actions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_actions.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_actions id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  '/tbl_s_actions/{id}/replace':
    post:
      tags:
        - tbl_s_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_actions.replaceById__post_tbl_s_actions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  /tbl_s_actions/findOne:
    get:
      tags:
        - tbl_s_actions
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_actions.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_actions'
      deprecated: false
  /tbl_s_actions/update:
    post:
      tags:
        - tbl_s_actions
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_actions.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_actions/count:
    get:
      tags:
        - tbl_s_actions
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_actions.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_actions/change-stream:
    post:
      tags:
        - tbl_s_actions
      summary: Create a change stream.
      operationId: tbl_s_actions.createChangeStream__post_tbl_s_actions_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_actions
      summary: Create a change stream.
      operationId: tbl_s_actions.createChangeStream__get_tbl_s_actions_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_plan_actions:
    post:
      tags:
        - tbl_s_plan_actions
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_plan_actions.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
    patch:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_plan_actions.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
    put:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_plan_actions.replaceOrCreate__put_tbl_s_plan_actions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
    get:
      tags:
        - tbl_s_plan_actions
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_plan_actions.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  /tbl_s_plan_actions/replaceOrCreate:
    post:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        tbl_s_plan_actions.replaceOrCreate__post_tbl_s_plan_actions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  /tbl_s_plan_actions/upsertWithWhere:
    post:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_plan_actions.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  '/tbl_s_plan_actions/{id}/exists':
    get:
      tags:
        - tbl_s_plan_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_plan_actions.exists__get_tbl_s_plan_actions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_plan_actions/{id}':
    head:
      tags:
        - tbl_s_plan_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_plan_actions.exists__head_tbl_s_plan_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_plan_actions
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_plan_actions.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
    put:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_plan_actions.replaceById__put_tbl_s_plan_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
    delete:
      tags:
        - tbl_s_plan_actions
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_plan_actions.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_plan_actions.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_plan_actions id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  '/tbl_s_plan_actions/{id}/replace':
    post:
      tags:
        - tbl_s_plan_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_plan_actions.replaceById__post_tbl_s_plan_actions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  /tbl_s_plan_actions/findOne:
    get:
      tags:
        - tbl_s_plan_actions
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_plan_actions.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_plan_actions'
      deprecated: false
  /tbl_s_plan_actions/update:
    post:
      tags:
        - tbl_s_plan_actions
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_plan_actions.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_plan_actions/count:
    get:
      tags:
        - tbl_s_plan_actions
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_plan_actions.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_plan_actions/change-stream:
    post:
      tags:
        - tbl_s_plan_actions
      summary: Create a change stream.
      operationId: >-
        tbl_s_plan_actions.createChangeStream__post_tbl_s_plan_actions_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_plan_actions
      summary: Create a change stream.
      operationId: >-
        tbl_s_plan_actions.createChangeStream__get_tbl_s_plan_actions_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_account_plans:
    post:
      tags:
        - tbl_s_account_plans
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_account_plans.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
    patch:
      tags:
        - tbl_s_account_plans
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_account_plans.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
    put:
      tags:
        - tbl_s_account_plans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_account_plans.replaceOrCreate__put_tbl_s_account_plans
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
    get:
      tags:
        - tbl_s_account_plans
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_account_plans.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  /tbl_s_account_plans/replaceOrCreate:
    post:
      tags:
        - tbl_s_account_plans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        tbl_s_account_plans.replaceOrCreate__post_tbl_s_account_plans_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  /tbl_s_account_plans/upsertWithWhere:
    post:
      tags:
        - tbl_s_account_plans
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_account_plans.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  '/tbl_s_account_plans/{id}/exists':
    get:
      tags:
        - tbl_s_account_plans
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_account_plans.exists__get_tbl_s_account_plans_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_account_plans/{id}':
    head:
      tags:
        - tbl_s_account_plans
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_account_plans.exists__head_tbl_s_account_plans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_account_plans
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_account_plans.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
    put:
      tags:
        - tbl_s_account_plans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_account_plans.replaceById__put_tbl_s_account_plans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
    delete:
      tags:
        - tbl_s_account_plans
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_account_plans.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_account_plans
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_account_plans.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_account_plans id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  '/tbl_s_account_plans/{id}/replace':
    post:
      tags:
        - tbl_s_account_plans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_account_plans.replaceById__post_tbl_s_account_plans_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  /tbl_s_account_plans/findOne:
    get:
      tags:
        - tbl_s_account_plans
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_account_plans.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_account_plans'
      deprecated: false
  /tbl_s_account_plans/update:
    post:
      tags:
        - tbl_s_account_plans
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_account_plans.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_account_plans'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_account_plans/count:
    get:
      tags:
        - tbl_s_account_plans
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_account_plans.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_account_plans/change-stream:
    post:
      tags:
        - tbl_s_account_plans
      summary: Create a change stream.
      operationId: >-
        tbl_s_account_plans.createChangeStream__post_tbl_s_account_plans_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_account_plans
      summary: Create a change stream.
      operationId: >-
        tbl_s_account_plans.createChangeStream__get_tbl_s_account_plans_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_planmemos:
    post:
      tags:
        - tbl_s_planmemos
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_planmemos.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
    patch:
      tags:
        - tbl_s_planmemos
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_planmemos.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
    put:
      tags:
        - tbl_s_planmemos
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_planmemos.replaceOrCreate__put_tbl_s_planmemos
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
    get:
      tags:
        - tbl_s_planmemos
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_planmemos.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  /tbl_s_planmemos/replaceOrCreate:
    post:
      tags:
        - tbl_s_planmemos
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_planmemos.replaceOrCreate__post_tbl_s_planmemos_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  /tbl_s_planmemos/upsertWithWhere:
    post:
      tags:
        - tbl_s_planmemos
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_planmemos.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  '/tbl_s_planmemos/{id}/exists':
    get:
      tags:
        - tbl_s_planmemos
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_planmemos.exists__get_tbl_s_planmemos_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_planmemos/{id}':
    head:
      tags:
        - tbl_s_planmemos
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_planmemos.exists__head_tbl_s_planmemos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_planmemos
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_planmemos.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
    put:
      tags:
        - tbl_s_planmemos
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_planmemos.replaceById__put_tbl_s_planmemos_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
    delete:
      tags:
        - tbl_s_planmemos
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_planmemos.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_planmemos
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_planmemos.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_planmemos id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  '/tbl_s_planmemos/{id}/replace':
    post:
      tags:
        - tbl_s_planmemos
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_planmemos.replaceById__post_tbl_s_planmemos_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  /tbl_s_planmemos/findOne:
    get:
      tags:
        - tbl_s_planmemos
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_planmemos.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_planmemos'
      deprecated: false
  /tbl_s_planmemos/update:
    post:
      tags:
        - tbl_s_planmemos
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_planmemos.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_planmemos'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_planmemos/count:
    get:
      tags:
        - tbl_s_planmemos
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_planmemos.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_planmemos/change-stream:
    post:
      tags:
        - tbl_s_planmemos
      summary: Create a change stream.
      operationId: tbl_s_planmemos.createChangeStream__post_tbl_s_planmemos_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_planmemos
      summary: Create a change stream.
      operationId: tbl_s_planmemos.createChangeStream__get_tbl_s_planmemos_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /tbl_s_accounts:
    post:
      tags:
        - tbl_s_accounts
      summary: Create a new instance of the model and persist it into the data source.
      operationId: tbl_s_accounts.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
    patch:
      tags:
        - tbl_s_accounts
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_accounts.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
    put:
      tags:
        - tbl_s_accounts
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_accounts.replaceOrCreate__put_tbl_s_accounts
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
    get:
      tags:
        - tbl_s_accounts
      summary: Find all instances of the model matched by filter from the data source.
      operationId: tbl_s_accounts.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  /tbl_s_accounts/replaceOrCreate:
    post:
      tags:
        - tbl_s_accounts
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: tbl_s_accounts.replaceOrCreate__post_tbl_s_accounts_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  /tbl_s_accounts/upsertWithWhere:
    post:
      tags:
        - tbl_s_accounts
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: tbl_s_accounts.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  '/tbl_s_accounts/{id}/exists':
    get:
      tags:
        - tbl_s_accounts
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_accounts.exists__get_tbl_s_accounts_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/tbl_s_accounts/{id}':
    head:
      tags:
        - tbl_s_accounts
      summary: Check whether a model instance exists in the data source.
      operationId: 'tbl_s_accounts.exists__head_tbl_s_accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - tbl_s_accounts
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: tbl_s_accounts.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
    put:
      tags:
        - tbl_s_accounts
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_accounts.replaceById__put_tbl_s_accounts_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
    delete:
      tags:
        - tbl_s_accounts
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: tbl_s_accounts.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - tbl_s_accounts
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: tbl_s_accounts.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: tbl_s_accounts id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  '/tbl_s_accounts/{id}/replace':
    post:
      tags:
        - tbl_s_accounts
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'tbl_s_accounts.replaceById__post_tbl_s_accounts_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  /tbl_s_accounts/findOne:
    get:
      tags:
        - tbl_s_accounts
      summary: Find first instance of the model matched by filter from the data source.
      operationId: tbl_s_accounts.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/tbl_s_accounts'
      deprecated: false
  /tbl_s_accounts/update:
    post:
      tags:
        - tbl_s_accounts
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: tbl_s_accounts.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/tbl_s_accounts'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /tbl_s_accounts/count:
    get:
      tags:
        - tbl_s_accounts
      summary: Count instances of the model matched by where from the data source.
      operationId: tbl_s_accounts.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /tbl_s_accounts/change-stream:
    post:
      tags:
        - tbl_s_accounts
      summary: Create a change stream.
      operationId: tbl_s_accounts.createChangeStream__post_tbl_s_accounts_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - tbl_s_accounts
      summary: Create a change stream.
      operationId: tbl_s_accounts.createChangeStream__get_tbl_s_accounts_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_remedialofferings:
    post:
      tags:
        - plan_remedialofferings
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_remedialofferings.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
    patch:
      tags:
        - plan_remedialofferings
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_remedialofferings.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
    put:
      tags:
        - plan_remedialofferings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_remedialofferings.replaceOrCreate__put_plan_remedialofferings
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
    get:
      tags:
        - plan_remedialofferings
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_remedialofferings.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  /plan_remedialofferings/replaceOrCreate:
    post:
      tags:
        - plan_remedialofferings
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        plan_remedialofferings.replaceOrCreate__post_plan_remedialofferings_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  /plan_remedialofferings/upsertWithWhere:
    post:
      tags:
        - plan_remedialofferings
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_remedialofferings.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  '/plan_remedialofferings/{id}/exists':
    get:
      tags:
        - plan_remedialofferings
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_remedialofferings.exists__get_plan_remedialofferings_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_remedialofferings/{id}':
    head:
      tags:
        - plan_remedialofferings
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_remedialofferings.exists__head_plan_remedialofferings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_remedialofferings
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_remedialofferings.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
    put:
      tags:
        - plan_remedialofferings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_remedialofferings.replaceById__put_plan_remedialofferings_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
    delete:
      tags:
        - plan_remedialofferings
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_remedialofferings.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_remedialofferings
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_remedialofferings.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_remedialofferings id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  '/plan_remedialofferings/{id}/replace':
    post:
      tags:
        - plan_remedialofferings
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: >-
        plan_remedialofferings.replaceById__post_plan_remedialofferings_{id}_replace
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  /plan_remedialofferings/findOne:
    get:
      tags:
        - plan_remedialofferings
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_remedialofferings.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_remedialofferings'
      deprecated: false
  /plan_remedialofferings/update:
    post:
      tags:
        - plan_remedialofferings
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_remedialofferings.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_remedialofferings'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_remedialofferings/count:
    get:
      tags:
        - plan_remedialofferings
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_remedialofferings.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_remedialofferings/change-stream:
    post:
      tags:
        - plan_remedialofferings
      summary: Create a change stream.
      operationId: >-
        plan_remedialofferings.createChangeStream__post_plan_remedialofferings_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_remedialofferings
      summary: Create a change stream.
      operationId: >-
        plan_remedialofferings.createChangeStream__get_plan_remedialofferings_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_customerproposals:
    post:
      tags:
        - plan_customerproposals
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_customerproposals.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
    patch:
      tags:
        - plan_customerproposals
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_customerproposals.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
    put:
      tags:
        - plan_customerproposals
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_customerproposals.replaceOrCreate__put_plan_customerproposals
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
    get:
      tags:
        - plan_customerproposals
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_customerproposals.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  /plan_customerproposals/replaceOrCreate:
    post:
      tags:
        - plan_customerproposals
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        plan_customerproposals.replaceOrCreate__post_plan_customerproposals_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  /plan_customerproposals/upsertWithWhere:
    post:
      tags:
        - plan_customerproposals
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_customerproposals.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  '/plan_customerproposals/{id}/exists':
    get:
      tags:
        - plan_customerproposals
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_customerproposals.exists__get_plan_customerproposals_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_customerproposals/{id}':
    head:
      tags:
        - plan_customerproposals
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_customerproposals.exists__head_plan_customerproposals_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_customerproposals
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_customerproposals.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
    put:
      tags:
        - plan_customerproposals
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_customerproposals.replaceById__put_plan_customerproposals_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
    delete:
      tags:
        - plan_customerproposals
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_customerproposals.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_customerproposals
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_customerproposals.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_customerproposals id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  '/plan_customerproposals/{id}/replace':
    post:
      tags:
        - plan_customerproposals
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: >-
        plan_customerproposals.replaceById__post_plan_customerproposals_{id}_replace
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  /plan_customerproposals/findOne:
    get:
      tags:
        - plan_customerproposals
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_customerproposals.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_customerproposals'
      deprecated: false
  /plan_customerproposals/update:
    post:
      tags:
        - plan_customerproposals
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_customerproposals.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_customerproposals'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_customerproposals/count:
    get:
      tags:
        - plan_customerproposals
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_customerproposals.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_customerproposals/change-stream:
    post:
      tags:
        - plan_customerproposals
      summary: Create a change stream.
      operationId: >-
        plan_customerproposals.createChangeStream__post_plan_customerproposals_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_customerproposals
      summary: Create a change stream.
      operationId: >-
        plan_customerproposals.createChangeStream__get_plan_customerproposals_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_ability:
    post:
      tags:
        - plan_ability
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_ability.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
    patch:
      tags:
        - plan_ability
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_ability.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
    put:
      tags:
        - plan_ability
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_ability.replaceOrCreate__put_plan_ability
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
    get:
      tags:
        - plan_ability
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_ability.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_ability'
      deprecated: false
  /plan_ability/replaceOrCreate:
    post:
      tags:
        - plan_ability
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_ability.replaceOrCreate__post_plan_ability_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
  /plan_ability/upsertWithWhere:
    post:
      tags:
        - plan_ability
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_ability.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
  '/plan_ability/{id}/exists':
    get:
      tags:
        - plan_ability
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_ability.exists__get_plan_ability_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_ability/{id}':
    head:
      tags:
        - plan_ability
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_ability.exists__head_plan_ability_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_ability
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_ability.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
    put:
      tags:
        - plan_ability
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_ability.replaceById__put_plan_ability_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
    delete:
      tags:
        - plan_ability
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_ability.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_ability
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_ability.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_ability id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
  '/plan_ability/{id}/replace':
    post:
      tags:
        - plan_ability
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_ability.replaceById__post_plan_ability_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
  /plan_ability/findOne:
    get:
      tags:
        - plan_ability
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_ability.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ability'
      deprecated: false
  /plan_ability/update:
    post:
      tags:
        - plan_ability
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_ability.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ability'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_ability/count:
    get:
      tags:
        - plan_ability
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_ability.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_ability/change-stream:
    post:
      tags:
        - plan_ability
      summary: Create a change stream.
      operationId: plan_ability.createChangeStream__post_plan_ability_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_ability
      summary: Create a change stream.
      operationId: plan_ability.createChangeStream__get_plan_ability_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_actions:
    post:
      tags:
        - plan_actions
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_actions.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
    patch:
      tags:
        - plan_actions
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_actions.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
    put:
      tags:
        - plan_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_actions.replaceOrCreate__put_plan_actions
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
    get:
      tags:
        - plan_actions
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_actions.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_actions'
      deprecated: false
  /plan_actions/replaceOrCreate:
    post:
      tags:
        - plan_actions
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_actions.replaceOrCreate__post_plan_actions_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
  /plan_actions/upsertWithWhere:
    post:
      tags:
        - plan_actions
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_actions.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
  '/plan_actions/{id}/exists':
    get:
      tags:
        - plan_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_actions.exists__get_plan_actions_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_actions/{id}':
    head:
      tags:
        - plan_actions
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_actions.exists__head_plan_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_actions
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_actions.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
    put:
      tags:
        - plan_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_actions.replaceById__put_plan_actions_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
    delete:
      tags:
        - plan_actions
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_actions.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_actions
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_actions.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_actions id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
  '/plan_actions/{id}/replace':
    post:
      tags:
        - plan_actions
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_actions.replaceById__post_plan_actions_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
  /plan_actions/findOne:
    get:
      tags:
        - plan_actions
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_actions.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_actions'
      deprecated: false
  /plan_actions/update:
    post:
      tags:
        - plan_actions
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_actions.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_actions'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_actions/count:
    get:
      tags:
        - plan_actions
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_actions.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_actions/change-stream:
    post:
      tags:
        - plan_actions
      summary: Create a change stream.
      operationId: plan_actions.createChangeStream__post_plan_actions_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_actions
      summary: Create a change stream.
      operationId: plan_actions.createChangeStream__get_plan_actions_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /qview:
    post:
      tags:
        - qview
      summary: Create a new instance of the model and persist it into the data source.
      operationId: qview.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
    patch:
      tags:
        - qview
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: qview.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
    put:
      tags:
        - qview
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qview.replaceOrCreate__put_qview
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
    get:
      tags:
        - qview
      summary: Find all instances of the model matched by filter from the data source.
      operationId: qview.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/qview'
      deprecated: false
  /qview/replaceOrCreate:
    post:
      tags:
        - qview
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: qview.replaceOrCreate__post_qview_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
  /qview/upsertWithWhere:
    post:
      tags:
        - qview
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: qview.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
  '/qview/{id}/exists':
    get:
      tags:
        - qview
      summary: Check whether a model instance exists in the data source.
      operationId: 'qview.exists__get_qview_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/qview/{id}':
    head:
      tags:
        - qview
      summary: Check whether a model instance exists in the data source.
      operationId: 'qview.exists__head_qview_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - qview
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: qview.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
    put:
      tags:
        - qview
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qview.replaceById__put_qview_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
    delete:
      tags:
        - qview
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: qview.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - qview
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: qview.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: qview id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
  '/qview/{id}/replace':
    post:
      tags:
        - qview
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'qview.replaceById__post_qview_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
  /qview/findOne:
    get:
      tags:
        - qview
      summary: Find first instance of the model matched by filter from the data source.
      operationId: qview.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/qview'
      deprecated: false
  /qview/update:
    post:
      tags:
        - qview
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: qview.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/qview'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /qview/count:
    get:
      tags:
        - qview
      summary: Count instances of the model matched by where from the data source.
      operationId: qview.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /qview/change-stream:
    post:
      tags:
        - qview
      summary: Create a change stream.
      operationId: qview.createChangeStream__post_qview_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - qview
      summary: Create a change stream.
      operationId: qview.createChangeStream__get_qview_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_swot:
    post:
      tags:
        - plan_swot
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_swot.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
    patch:
      tags:
        - plan_swot
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_swot.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
    put:
      tags:
        - plan_swot
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_swot.replaceOrCreate__put_plan_swot
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
    get:
      tags:
        - plan_swot
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_swot.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_swot'
      deprecated: false
  /plan_swot/replaceOrCreate:
    post:
      tags:
        - plan_swot
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_swot.replaceOrCreate__post_plan_swot_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
  /plan_swot/upsertWithWhere:
    post:
      tags:
        - plan_swot
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_swot.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
  '/plan_swot/{id}/exists':
    get:
      tags:
        - plan_swot
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_swot.exists__get_plan_swot_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_swot/{id}':
    head:
      tags:
        - plan_swot
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_swot.exists__head_plan_swot_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_swot
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_swot.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
    put:
      tags:
        - plan_swot
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_swot.replaceById__put_plan_swot_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
    delete:
      tags:
        - plan_swot
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_swot.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_swot
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_swot.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_swot id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
  '/plan_swot/{id}/replace':
    post:
      tags:
        - plan_swot
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_swot.replaceById__post_plan_swot_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
  /plan_swot/findOne:
    get:
      tags:
        - plan_swot
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_swot.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_swot'
      deprecated: false
  /plan_swot/update:
    post:
      tags:
        - plan_swot
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_swot.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_swot'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_swot/count:
    get:
      tags:
        - plan_swot
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_swot.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_swot/change-stream:
    post:
      tags:
        - plan_swot
      summary: Create a change stream.
      operationId: plan_swot.createChangeStream__post_plan_swot_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_swot
      summary: Create a change stream.
      operationId: plan_swot.createChangeStream__get_plan_swot_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_problemdefinition:
    post:
      tags:
        - plan_problemdefinition
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_problemdefinition.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
    patch:
      tags:
        - plan_problemdefinition
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_problemdefinition.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
    put:
      tags:
        - plan_problemdefinition
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_problemdefinition.replaceOrCreate__put_plan_problemdefinition
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
    get:
      tags:
        - plan_problemdefinition
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_problemdefinition.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  /plan_problemdefinition/replaceOrCreate:
    post:
      tags:
        - plan_problemdefinition
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: >-
        plan_problemdefinition.replaceOrCreate__post_plan_problemdefinition_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  /plan_problemdefinition/upsertWithWhere:
    post:
      tags:
        - plan_problemdefinition
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_problemdefinition.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  '/plan_problemdefinition/{id}/exists':
    get:
      tags:
        - plan_problemdefinition
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_problemdefinition.exists__get_plan_problemdefinition_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_problemdefinition/{id}':
    head:
      tags:
        - plan_problemdefinition
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_problemdefinition.exists__head_plan_problemdefinition_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_problemdefinition
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_problemdefinition.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
    put:
      tags:
        - plan_problemdefinition
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_problemdefinition.replaceById__put_plan_problemdefinition_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
    delete:
      tags:
        - plan_problemdefinition
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_problemdefinition.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_problemdefinition
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_problemdefinition.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_problemdefinition id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  '/plan_problemdefinition/{id}/replace':
    post:
      tags:
        - plan_problemdefinition
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: >-
        plan_problemdefinition.replaceById__post_plan_problemdefinition_{id}_replace
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  /plan_problemdefinition/findOne:
    get:
      tags:
        - plan_problemdefinition
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_problemdefinition.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_problemdefinition'
      deprecated: false
  /plan_problemdefinition/update:
    post:
      tags:
        - plan_problemdefinition
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_problemdefinition.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_problemdefinition'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_problemdefinition/count:
    get:
      tags:
        - plan_problemdefinition
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_problemdefinition.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_problemdefinition/change-stream:
    post:
      tags:
        - plan_problemdefinition
      summary: Create a change stream.
      operationId: >-
        plan_problemdefinition.createChangeStream__post_plan_problemdefinition_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_problemdefinition
      summary: Create a change stream.
      operationId: >-
        plan_problemdefinition.createChangeStream__get_plan_problemdefinition_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_background:
    post:
      tags:
        - plan_background
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_background.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
    patch:
      tags:
        - plan_background
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_background.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
    put:
      tags:
        - plan_background
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_background.replaceOrCreate__put_plan_background
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
    get:
      tags:
        - plan_background
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_background.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_background'
      deprecated: false
  /plan_background/replaceOrCreate:
    post:
      tags:
        - plan_background
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_background.replaceOrCreate__post_plan_background_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
  /plan_background/upsertWithWhere:
    post:
      tags:
        - plan_background
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_background.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
  '/plan_background/{id}/exists':
    get:
      tags:
        - plan_background
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_background.exists__get_plan_background_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_background/{id}':
    head:
      tags:
        - plan_background
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_background.exists__head_plan_background_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_background
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_background.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
    put:
      tags:
        - plan_background
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_background.replaceById__put_plan_background_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
    delete:
      tags:
        - plan_background
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_background.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_background
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_background.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_background id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
  '/plan_background/{id}/replace':
    post:
      tags:
        - plan_background
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_background.replaceById__post_plan_background_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
  /plan_background/findOne:
    get:
      tags:
        - plan_background
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_background.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_background'
      deprecated: false
  /plan_background/update:
    post:
      tags:
        - plan_background
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_background.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_background'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_background/count:
    get:
      tags:
        - plan_background
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_background.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_background/change-stream:
    post:
      tags:
        - plan_background
      summary: Create a change stream.
      operationId: plan_background.createChangeStream__post_plan_background_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_background
      summary: Create a change stream.
      operationId: plan_background.createChangeStream__get_plan_background_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /plan_ptpplans:
    post:
      tags:
        - plan_ptpplans
      summary: Create a new instance of the model and persist it into the data source.
      operationId: plan_ptpplans.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
    patch:
      tags:
        - plan_ptpplans
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: plan_ptpplans.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
    put:
      tags:
        - plan_ptpplans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_ptpplans.replaceOrCreate__put_plan_ptpplans
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
    get:
      tags:
        - plan_ptpplans
      summary: Find all instances of the model matched by filter from the data source.
      operationId: plan_ptpplans.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  /plan_ptpplans/replaceOrCreate:
    post:
      tags:
        - plan_ptpplans
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: plan_ptpplans.replaceOrCreate__post_plan_ptpplans_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  /plan_ptpplans/upsertWithWhere:
    post:
      tags:
        - plan_ptpplans
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: plan_ptpplans.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  '/plan_ptpplans/{id}/exists':
    get:
      tags:
        - plan_ptpplans
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_ptpplans.exists__get_plan_ptpplans_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/plan_ptpplans/{id}':
    head:
      tags:
        - plan_ptpplans
      summary: Check whether a model instance exists in the data source.
      operationId: 'plan_ptpplans.exists__head_plan_ptpplans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - plan_ptpplans
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: plan_ptpplans.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
    put:
      tags:
        - plan_ptpplans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_ptpplans.replaceById__put_plan_ptpplans_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
    delete:
      tags:
        - plan_ptpplans
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: plan_ptpplans.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - plan_ptpplans
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: plan_ptpplans.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: plan_ptpplans id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  '/plan_ptpplans/{id}/replace':
    post:
      tags:
        - plan_ptpplans
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'plan_ptpplans.replaceById__post_plan_ptpplans_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  /plan_ptpplans/findOne:
    get:
      tags:
        - plan_ptpplans
      summary: Find first instance of the model matched by filter from the data source.
      operationId: plan_ptpplans.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/plan_ptpplans'
      deprecated: false
  /plan_ptpplans/update:
    post:
      tags:
        - plan_ptpplans
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: plan_ptpplans.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/plan_ptpplans'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /plan_ptpplans/count:
    get:
      tags:
        - plan_ptpplans
      summary: Count instances of the model matched by where from the data source.
      operationId: plan_ptpplans.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /plan_ptpplans/change-stream:
    post:
      tags:
        - plan_ptpplans
      summary: Create a change stream.
      operationId: plan_ptpplans.createChangeStream__post_plan_ptpplans_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - plan_ptpplans
      summary: Create a change stream.
      operationId: plan_ptpplans.createChangeStream__get_plan_ptpplans_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /custview:
    post:
      tags:
        - custview
      summary: Create a new instance of the model and persist it into the data source.
      operationId: custview.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
    patch:
      tags:
        - custview
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: custview.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
    put:
      tags:
        - custview
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: custview.replaceOrCreate__put_custview
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
    get:
      tags:
        - custview
      summary: Find all instances of the model matched by filter from the data source.
      operationId: custview.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/custview'
      deprecated: false
  /custview/replaceOrCreate:
    post:
      tags:
        - custview
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: custview.replaceOrCreate__post_custview_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
  /custview/upsertWithWhere:
    post:
      tags:
        - custview
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: custview.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
  '/custview/{id}/exists':
    get:
      tags:
        - custview
      summary: Check whether a model instance exists in the data source.
      operationId: 'custview.exists__get_custview_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/custview/{id}':
    head:
      tags:
        - custview
      summary: Check whether a model instance exists in the data source.
      operationId: 'custview.exists__head_custview_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - custview
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: custview.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
    put:
      tags:
        - custview
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'custview.replaceById__put_custview_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
    delete:
      tags:
        - custview
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: custview.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - custview
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: custview.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: custview id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
  '/custview/{id}/replace':
    post:
      tags:
        - custview
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'custview.replaceById__post_custview_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
  /custview/findOne:
    get:
      tags:
        - custview
      summary: Find first instance of the model matched by filter from the data source.
      operationId: custview.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/custview'
      deprecated: false
  /custview/update:
    post:
      tags:
        - custview
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: custview.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/custview'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /custview/count:
    get:
      tags:
        - custview
      summary: Count instances of the model matched by where from the data source.
      operationId: custview.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /custview/change-stream:
    post:
      tags:
        - custview
      summary: Create a change stream.
      operationId: custview.createChangeStream__post_custview_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - custview
      summary: Create a change stream.
      operationId: custview.createChangeStream__get_custview_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /sptypes:
    post:
      tags:
        - sptypes
      summary: Create a new instance of the model and persist it into the data source.
      operationId: sptypes.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
    patch:
      tags:
        - sptypes
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: sptypes.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
    put:
      tags:
        - sptypes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sptypes.replaceOrCreate__put_sptypes
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
    get:
      tags:
        - sptypes
      summary: Find all instances of the model matched by filter from the data source.
      operationId: sptypes.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/sptypes'
      deprecated: false
  /sptypes/replaceOrCreate:
    post:
      tags:
        - sptypes
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: sptypes.replaceOrCreate__post_sptypes_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
  /sptypes/upsertWithWhere:
    post:
      tags:
        - sptypes
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: sptypes.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
  '/sptypes/{id}/exists':
    get:
      tags:
        - sptypes
      summary: Check whether a model instance exists in the data source.
      operationId: 'sptypes.exists__get_sptypes_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/sptypes/{id}':
    head:
      tags:
        - sptypes
      summary: Check whether a model instance exists in the data source.
      operationId: 'sptypes.exists__head_sptypes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - sptypes
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: sptypes.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
    put:
      tags:
        - sptypes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sptypes.replaceById__put_sptypes_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
    delete:
      tags:
        - sptypes
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: sptypes.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - sptypes
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: sptypes.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: sptypes id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
  '/sptypes/{id}/replace':
    post:
      tags:
        - sptypes
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'sptypes.replaceById__post_sptypes_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
  /sptypes/findOne:
    get:
      tags:
        - sptypes
      summary: Find first instance of the model matched by filter from the data source.
      operationId: sptypes.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/sptypes'
      deprecated: false
  /sptypes/update:
    post:
      tags:
        - sptypes
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: sptypes.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/sptypes'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /sptypes/count:
    get:
      tags:
        - sptypes
      summary: Count instances of the model matched by where from the data source.
      operationId: sptypes.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /sptypes/change-stream:
    post:
      tags:
        - sptypes
      summary: Create a change stream.
      operationId: sptypes.createChangeStream__post_sptypes_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - sptypes
      summary: Create a change stream.
      operationId: sptypes.createChangeStream__get_sptypes_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /authextletters:
    post:
      tags:
        - authextletters
      summary: Create a new instance of the model and persist it into the data source.
      operationId: authextletters.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
    patch:
      tags:
        - authextletters
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: authextletters.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
    put:
      tags:
        - authextletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: authextletters.replaceOrCreate__put_authextletters
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
    get:
      tags:
        - authextletters
      summary: Find all instances of the model matched by filter from the data source.
      operationId: authextletters.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/authextletters'
      deprecated: false
  /authextletters/replaceOrCreate:
    post:
      tags:
        - authextletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: authextletters.replaceOrCreate__post_authextletters_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
  /authextletters/upsertWithWhere:
    post:
      tags:
        - authextletters
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: authextletters.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
  '/authextletters/{id}/exists':
    get:
      tags:
        - authextletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'authextletters.exists__get_authextletters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/authextletters/{id}':
    head:
      tags:
        - authextletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'authextletters.exists__head_authextletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - authextletters
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: authextletters.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
    put:
      tags:
        - authextletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'authextletters.replaceById__put_authextletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
    delete:
      tags:
        - authextletters
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: authextletters.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - authextletters
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: authextletters.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: authextletters id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
  '/authextletters/{id}/replace':
    post:
      tags:
        - authextletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'authextletters.replaceById__post_authextletters_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
  /authextletters/findOne:
    get:
      tags:
        - authextletters
      summary: Find first instance of the model matched by filter from the data source.
      operationId: authextletters.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/authextletters'
      deprecated: false
  /authextletters/update:
    post:
      tags:
        - authextletters
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: authextletters.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/authextletters'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /authextletters/count:
    get:
      tags:
        - authextletters
      summary: Count instances of the model matched by where from the data source.
      operationId: authextletters.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /authextletters/change-stream:
    post:
      tags:
        - authextletters
      summary: Create a change stream.
      operationId: authextletters.createChangeStream__post_authextletters_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - authextletters
      summary: Create a change stream.
      operationId: authextletters.createChangeStream__get_authextletters_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /extletters:
    post:
      tags:
        - extletters
      summary: Create a new instance of the model and persist it into the data source.
      operationId: extletters.create
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
    patch:
      tags:
        - extletters
      summary: >-
        Patch an existing model instance or insert a new one into the data
        source.
      operationId: extletters.patchOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
    put:
      tags:
        - extletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: extletters.replaceOrCreate__put_extletters
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
    get:
      tags:
        - extletters
      summary: Find all instances of the model matched by filter from the data source.
      operationId: extletters.find
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/extletters'
      deprecated: false
  /extletters/replaceOrCreate:
    post:
      tags:
        - extletters
      summary: >-
        Replace an existing model instance or insert a new one into the data
        source.
      operationId: extletters.replaceOrCreate__post_extletters_replaceOrCreate
      parameters:
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
  /extletters/upsertWithWhere:
    post:
      tags:
        - extletters
      summary: >-
        Update an existing model instance or insert a new one into the data
        source based on the where criteria.
      operationId: extletters.upsertWithWhere
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
  '/extletters/{id}/exists':
    get:
      tags:
        - extletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'extletters.exists__get_extletters_{id}_exists'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
  '/extletters/{id}':
    head:
      tags:
        - extletters
      summary: Check whether a model instance exists in the data source.
      operationId: 'extletters.exists__head_extletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              exists:
                type: boolean
      deprecated: false
    get:
      tags:
        - extletters
      summary: 'Find a model instance by {{id}} from the data source.'
      operationId: extletters.findById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: filter
          in: query
          description: >-
            Filter defining fields and include - must be a JSON-encoded string
            ({"something":"value"})
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
    put:
      tags:
        - extletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'extletters.replaceById__put_extletters_{id}'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
    delete:
      tags:
        - extletters
      summary: 'Delete a model instance by {{id}} from the data source.'
      operationId: extletters.deleteById
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
      deprecated: false
    patch:
      tags:
        - extletters
      summary: >-
        Patch attributes for a model instance and persist it into the data
        source.
      operationId: extletters.prototype.patchAttributes
      parameters:
        - name: id
          in: path
          description: extletters id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
  '/extletters/{id}/replace':
    post:
      tags:
        - extletters
      summary: >-
        Replace attributes for a model instance and persist it into the data
        source.
      operationId: 'extletters.replaceById__post_extletters_{id}_replace'
      parameters:
        - name: id
          in: path
          description: Model id
          required: true
          type: string
          format: JSON
        - name: data
          in: body
          description: Model instance data
          required: false
          schema:
            description: Model instance data
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
  /extletters/findOne:
    get:
      tags:
        - extletters
      summary: Find first instance of the model matched by filter from the data source.
      operationId: extletters.findOne
      parameters:
        - name: filter
          in: query
          description: >-
            Filter defining fields, where, include, order, offset, and limit -
            must be a JSON-encoded string (`{"where":{"something":"value"}}`). 
            See
            https://loopback.io/doc/en/lb3/Querying-data.html#using-stringified-json-in-rest-queries
            for more details.
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            $ref: '#/definitions/extletters'
      deprecated: false
  /extletters/update:
    post:
      tags:
        - extletters
      summary: 'Update instances of the model matched by {{where}} from the data source.'
      operationId: extletters.updateAll
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
        - name: data
          in: body
          description: An object of model property name/value pairs
          required: false
          schema:
            description: An object of model property name/value pairs
            $ref: '#/definitions/extletters'
      responses:
        '200':
          description: Request was successful
          schema:
            description: Information related to the outcome of the operation
            type: object
            properties:
              count:
                description: The number of instances updated
                type: number
                format: double
      deprecated: false
  /extletters/count:
    get:
      tags:
        - extletters
      summary: Count instances of the model matched by where from the data source.
      operationId: extletters.count
      parameters:
        - name: where
          in: query
          description: Criteria to match model instances
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: object
            properties:
              count:
                type: number
                format: double
      deprecated: false
  /extletters/change-stream:
    post:
      tags:
        - extletters
      summary: Create a change stream.
      operationId: extletters.createChangeStream__post_extletters_change-stream
      parameters:
        - name: options
          in: formData
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
    get:
      tags:
        - extletters
      summary: Create a change stream.
      operationId: extletters.createChangeStream__get_extletters_change-stream
      parameters:
        - name: options
          in: query
          required: false
          type: string
          format: JSON
      responses:
        '200':
          description: Request was successful
          schema:
            type: file
      deprecated: false
  /extletters/search:
    get:
      tags:
        - extletters
      operationId: extletters.search
      parameters:
        - name: nationid
          in: query
          required: false
          type: string
        - name: letterid
          in: query
          required: false
          type: string
      responses:
        '200':
          description: Request was successful
          schema:
            type: array
            items:
              $ref: '#/definitions/x-any'
      deprecated: false
tags:
  - name: sms
  - name: demandsdue
  - name: demandsduecc
  - name: demandsettings
  - name: demandshistory
  - name: notehis
  - name: cards_stage
  - name: qcards
  - name: tbl_q_all
  - name: watch_stage
  - name: tbl_smstemplate
  - name: guarantors
  - name: guarantordetails
  - name: guarantorletters
  - name: tblusers
  - name: permissionsettings
  - name: uploads
  - name: activitylogs
  - name: cmdstatus
  - name: branchstatus
  - name: tbl_portfolio_static
  - name: ptps
  - name: teles
  - name: tblcard_static
  - name: global_letter_settings
  - name: autoletters
  - name: mcoopcash_static
  - name: mcoopcash_stage
  - name: customersuspensions
  - name: tqall
  - name: qall
  - name: activitylog
  - name: cure
  - name: party
  - name: excuse
  - name: collectoraction
  - name: deptcollateral
  - name: notifications
  - name: qallcards
  - name: memos
  - name: tcards
  - name: branches
  - name: cards_watch_stage
  - name: cards_watch_static
  - name: watch_static
  - name: tbl_s_plans
  - name: tbl_s_actions
  - name: tbl_s_plan_actions
  - name: tbl_s_account_plans
  - name: tbl_s_planmemos
  - name: tbl_s_accounts
  - name: plan_remedialofferings
  - name: plan_customerproposals
  - name: plan_ability
  - name: plan_actions
  - name: qview
  - name: plan_swot
  - name: plan_problemdefinition
  - name: plan_background
  - name: plan_ptpplans
  - name: custview
  - name: sptypes
  - name: authextletters
  - name: extletters
consumes:
  - application/json
  - application/x-www-form-urlencoded
  - application/xml
  - text/xml
produces:
  - application/json
  - application/xml
  - text/xml
  - application/javascript
  - text/javascript
definitions:
  sms:
    properties:
      smsid:
        type: number
        format: double
      custnumber:
        type: string
      accnumber:
        type: string
      owner:
        type: string
      message:
        type: string
      arrears:
        type: number
        format: double
      datesent:
        type: string
        format: date-time
      sent:
        default: 'N'
        type: string
      telnumber:
        type: string
      stagedate:
        type: string
        format: date-time
    required:
      - smsid
      - custnumber
      - accnumber
    additionalProperties: false
  x-any:
    properties: {}
  guarantors:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: number
        format: double
      custnumber:
        default: nationid
        type: string
      nationid:
        type: string
      guarantorname:
        type: string
    required:
      - id
    additionalProperties: false
  demandsdue:
    properties:
      id:
        type: number
        format: double
      custnumber:
        type: string
      accnumber:
        type: string
      client_name:
        type: string
      section:
        type: string
      oustbalance:
        type: number
        format: double
      totalarrears:
        type: number
        format: double
      daysinarr:
        type: number
        format: double
      address:
        type: string
      postalcode:
        type: string
      telnumber:
        type: string
      emailaddress:
        type: string
      datedue:
        type: string
        format: date-time
      datesent:
        type: string
        format: date-time
      demandletter:
        type: string
      colofficer:
        type: string
      status:
        default: PENDING
        type: string
    required:
      - id
    additionalProperties: false
  demandsduecc:
    properties:
      id:
        type: number
        format: double
      cardacct:
        type: string
      cardnumber:
        type: string
      cardname:
        type: string
      accountno:
        type: string
      nationid:
        type: string
      exppmnt:
        type: number
        format: double
      limit:
        type: number
        format: double
      outbalance:
        type: number
        format: double
      daysinarrears:
        type: number
        format: double
      city:
        type: string
      rpcode:
        type: string
      tel:
        type: number
        format: double
      mobile:
        type: string
      emailaddress:
        type: string
      cardstatus:
        type: string
      datedue:
        type: string
        format: date-time
      datesent:
        type: string
        format: date-time
      colofficer:
        type: string
      status:
        type: string
      demandletter:
        type: string
      destpath:
        type: string
    required:
      - id
      - cardacct
    additionalProperties: false
  demandsettings:
    properties:
      letterid:
        type: string
      smstemplate:
        type: string
      suspendletter:
        type: string
      templatepath:
        type: string
      autodelivered:
        type: string
      suspendautodelivery:
        type: string
      suspendsms:
        type: string
      datelastupdated:
        type: string
        format: date-time
      updatedby:
        type: string
      byemail:
        type: string
      byphysical:
        type: string
      bysms:
        type: string
    required:
      - letterid
    additionalProperties: false
  demandshistory:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      owner:
        type: string
      datesent:
        type: string
        format: date-time
      filepath:
        type: string
      filename:
        type: string
      byemail:
        type: string
      byphysical:
        type: string
      bypost:
        type: string
      demand:
        type: string
      customeremail:
        type: string
      sendemail:
        type: string
      stagedate:
        type: string
        format: date-time
      status:
        type: string
      reissued:
        type: string
      guarantorsno:
        type: number
        format: double
      guarantorsemail:
        type: string
    required:
      - id
      - owner
    additionalProperties: false
  notehis:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      notemade:
        type: string
      owner:
        type: string
      noteimp:
        type: string
      notesrc:
        type: string
      notedate:
        type: string
        format: date-time
    required:
      - id
    additionalProperties: false
  tblcard_static:
    properties:
      cardnumber:
        type: string
      accountno:
        type: string
      accountstatus:
        type: string
      address:
        type: string
      ageinmonths:
        type: number
        format: double
      amountpaid:
        type: number
        format: double
      arrstartdate:
        type: string
      cardname:
        type: string
      cardacct:
        type: string
      cardstatus:
        type: string
      city:
        type: string
      cycle:
        type: string
      datedisbursed:
        type: string
      datesuspended:
        type: string
      daysinarrears:
        type: string
      dob:
        type: string
      duedate:
        type: string
      email:
        type: string
      exppmnt:
        type: string
      fax:
        type: string
      lastpaymentdate:
        type: string
      limit:
        type: string
      mobile:
        type: string
      nationid:
        type: string
      outbalance:
        type: number
        format: double
      payment:
        type: string
      prevdebt:
        type: string
      rpcode:
        type: string
      stagedate:
        type: string
        format: date-time
      tel:
        type: string
      title:
        type: string
    required:
      - cardnumber
      - accountno
      - arrstartdate
      - city
    additionalProperties: false
  cards_stage:
    properties:
      cardnumber:
        type: string
      accountno:
        type: string
      accountstatus:
        type: string
      address:
        type: string
      ageinmonths:
        type: number
        format: double
      amountpaid:
        type: number
        format: double
      arrstartdate:
        type: string
      cardname:
        type: string
      cardacct:
        type: string
      cardstatus:
        type: string
      city:
        type: string
      cycle:
        type: string
      datedisbursed:
        type: string
      datesuspended:
        type: string
      daysinarrears:
        type: string
      dob:
        type: string
      duedate:
        type: string
      email:
        type: string
      exppmnt:
        type: string
      fax:
        type: string
      lastpaymentdate:
        type: string
      limit:
        type: string
      mobile:
        type: string
      nationid:
        type: string
      outbalance:
        type: number
        format: double
      payment:
        type: string
      prevdebt:
        type: string
      rpcode:
        type: string
      stagedate:
        type: string
        format: date-time
      tel:
        type: string
    required:
      - cardnumber
      - accountno
      - arrstartdate
      - city
    additionalProperties: false
  guarantordetails:
    properties:
      id:
        type: number
        format: double
      nationid:
        type: string
      guarantorname:
        type: string
      custnumber:
        type: string
      accnumber:
        type: string
      address:
        type: string
      postalcode:
        type: string
      email:
        type: string
      telnumber:
        type: string
      active:
        type: string
    required:
      - id
    additionalProperties: false
  qcards:
    properties:
      cardnumber:
        type: string
      accountno:
        type: string
      accountstatus:
        type: string
      address:
        type: string
      ageinmonths:
        type: number
        format: double
      colofficer:
        type: number
        format: double
      excuse:
        type: string
      cardname:
        type: string
      cardacct:
        type: string
      cardstatus:
        type: string
      city:
        type: string
      cycle:
        type: string
      datedisbursed:
        type: string
      datesuspended:
        type: string
      daysinarrears:
        type: string
      dob:
        type: string
      duedate:
        type: string
      email:
        type: string
      exppmnt:
        type: string
      reviewdate:
        type: string
      lastpaymentdate:
        type: string
      limit:
        type: string
      mobile:
        type: string
      nationid:
        type: string
      outbalance:
        type: number
        format: double
      payment:
        type: string
      prevdebt:
        type: string
      rpcode:
        type: string
      cmdstatus:
        type: string
        format: date-time
      tel:
        type: string
      employer:
        type: string
    required:
      - cardnumber
      - accountno
      - excuse
      - city
    additionalProperties: false
  tbl_q_all:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      client_name:
        type: string
      currency:
        type: string
      origdate:
        type: string
      origbalance:
        type: string
      oustbalance:
        type: number
        format: double
      productcode:
        type: string
      daysinarr:
        type: number
        format: double
      instamount:
        type: number
        format: double
      intratearr:
        type: number
        format: double
      princarrears:
        type: number
        format: double
      intarrears:
        type: string
      totalarrears:
        type: number
        format: double
      limitamount:
        type: string
      templimit:
        type: string
      templimitexpirydate:
        type: string
      limitexpirydate:
        type: string
      bucket:
        type: string
      lastcredamnt:
        type: string
      lastcreddate:
        type: string
      nextrepaydate:
        type: string
      branchcode:
        type: string
      arocode:
        type: string
      region:
        type: string
      section:
        type: string
      addressline1:
        type: string
      dob:
        type: string
      celnumber:
        type: string
      telnumber:
        type: string
      nationid:
        type: string
      streetaddress:
        type: string
      postcode:
        type: string
      emailaddress:
        type: string
      colofficer:
        type: string
      branchname:
        type: string
      reviewdate:
        type: string
        format: date-time
      routetostate:
        type: string
      excuse:
        type: string
      branchstatus:
        type: string
      cmdstatus:
        type: string
      manager:
        type: string
      fileno:
        type: string
      settleaccno:
        type: string
      settleaccbal:
        type: number
        format: double
      kbrr:
        type: number
        format: double
    required:
      - accnumber
    additionalProperties: false
  watch_static:
    properties:
      accnumber:
        type: string
      allocateflagdate:
        type: string
      colofficer:
        type: string
      allocateflag:
        type: string
      section:
        type: string
      excuse:
        type: string
      routetostate:
        type: string
      lastactiondate:
        type: string
      cmdstatus:
        type: string
      rfdother:
        type: string
      reviewdate:
        type: string
    required:
      - accnumber
    additionalProperties: false
  watch_stage:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      custname:
        type: string
      currency:
        type: string
      oustbalance:
        type: string
      repaymentamount:
        type: string
      repaymentdate:
        type: string
      productcode:
        type: number
        format: double
      arocode:
        type: string
      branchcode:
        type: number
        format: double
      settleaccno:
        type: number
        format: double
      settleaccbal:
        type: number
        format: double
      addressline1:
        type: number
        format: double
      town:
        type: string
      celnumber:
        type: number
        format: double
      telnumber:
        type: string
      emailaddress:
        type: string
      dob:
        type: string
      nationid:
        type: string
      deptcode:
        type: string
      employer:
        type: string
      employerno:
        type: string
    required:
      - accnumber
    additionalProperties: false
  tbl_smstemplate:
    properties:
      id:
        type: number
        format: double
      message:
        type: string
      title:
        type: string
      createdate:
        type: string
        format: date-time
    required:
      - id
    additionalProperties: false
  guarantorletters:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      idnumber:
        type: string
      guarantorsname:
        type: string
      address:
        type: string
      email:
        type: string
      telnumber:
        type: string
      datesent:
        type: string
        format: date-time
      owner:
        type: string
      byemail:
        type: string
      byphysical:
        type: string
      bypost:
        type: string
      filepath:
        type: string
      stagedate:
        type: string
        format: date-time
    required:
      - id
      - accnumber
      - custnumber
      - idnumber
    additionalProperties: false
  tblusers:
    properties:
      username:
        type: string
      firstname:
        type: string
      surname:
        type: string
      lastname:
        type: string
      active:
        default: 'Y'
        type: string
      onleave:
        type: string
      createdate:
        type: string
        format: date-time
      accessrights:
        default: user
        type: string
      isteamleader:
        type: string
      manager:
        type: string
      division:
        default: CMD
        type: string
      dateloglast:
        type: string
        format: date-time
      loggedin:
        default: 'N'
        type: string
      loked:
        type: string
      email:
        type: string
      expirydate:
        type: string
      role:
        type: string
      branch:
        type: string
      vonline:
        type: string
      telecollector:
        type: string
      team:
        type: string
    required:
      - username
    additionalProperties: false
  permissionsettings:
    properties:
      sett_id:
        type: number
        format: double
      role_id:
        type: string
      perm_id:
        type: string
      attr:
        type: string
    required:
      - sett_id
    additionalProperties: false
  uploads:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      destpath:
        type: string
      filesize:
        type: string
      filetype:
        type: string
      doctype:
        type: string
      filename:
        type: string
      docdesc:
        type: string
      colofficer:
        type: string
      stagedate:
        type: string
        format: date-time
      userdesctype:
        type: string
    required:
      - id
      - accnumber
      - custnumber
    additionalProperties: false
  activitylogs:
    properties:
      id:
        type: number
        format: double
      accountnumber:
        type: string
      custnumber:
        type: string
      collectoraction:
        type: string
      cure:
        type: string
      party:
        type: string
      ptpamount:
        type: number
        format: double
      ptp:
        default: 'N'
        type: string
      ptpdate:
        type: string
        format: date-time
      collectornote:
        type: string
      reviewdate:
        type: string
      reason:
        type: string
      cmdstatus:
        type: string
      branchstatus:
        type: string
      route:
        type: string
      paymode:
        type: string
      noteimp:
        type: string
      notesrc:
        type: string
      rfdother:
        type: string
      owner:
        type: string
      arramount:
        type: number
        format: double
      oustamount:
        type: number
        format: double
      actiondate:
        type: string
        format: date-time
      product:
        type: string
      ptpsms:
        type: string
      ptpsmsnumber:
        type: string
    required:
      - id
    additionalProperties: false
  cmdstatus:
    properties:
      id:
        type: number
        format: double
      cmdstatus:
        type: string
    required:
      - id
    additionalProperties: false
  branchstatus:
    properties:
      id:
        type: number
        format: double
      branchstatus:
        type: string
    required:
      - id
    additionalProperties: false
  tbl_portfolio_static:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      fileno:
        type: string
      datereceived:
        type: string
      dateallocated:
        type: string
      tocmd:
        type: string
      section:
        type: number
        format: double
      collectionstatus:
        type: string
      colofficer:
        type: string
      reviewdate:
        type: string
        format: date-time
      excuse:
        type: string
      routetostate:
        type: string
      rts:
        type: string
      rtsdate:
        type: string
      rtsexpecteddate:
        type: string
      rtsreturndate:
        type: string
      sbu:
        type: string
      typeoffacility:
        type: string
      natureofbusiness:
        type: string
      facilitypurpose:
        type: string
      cmdstatus:
        type: string
      branchcode:
        type: string
      actiondate:
        type: string
        format: date-time
      arocode:
        type: string
      curing:
        type: string
      excuse_other:
        type: string
      region:
        type: string
      accplan:
        type: string
      colofficer_sec:
        type: string
      regionalcolofficer:
        type: string
      lastactiondate:
        type: string
        format: date-time
    required:
      - accnumber
    additionalProperties: false
  ptps:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      ptpamount:
        default: 0
        type: number
        format: double
      met:
        type: string
      paymentdate:
        type: string
      arramount:
        type: number
        format: double
      ptpdate:
        type: string
      paymethod:
        type: string
      actiondate:
        type: string
        format: date-time
      owner:
        type: string
      ammended:
        type: string
    required:
      - id
      - accnumber
      - ptpamount
    additionalProperties: false
  teles:
    properties:
      id:
        type: number
        format: double
      custnumber:
        type: string
      telephone:
        type: string
      email:
        type: string
      owner:
        type: string
      updatedlast:
        type: string
        format: date-time
      updatedby:
        type: string
      active:
        type: string
      address:
        type: string
      postcode:
        type: string
    required:
      - id
      - custnumber
    additionalProperties: false
  global_letter_settings:
    properties:
      company:
        type: string
      footer:
        type: string
      directors:
        type: string
      logo:
        type: string
    required:
      - company
    additionalProperties: false
  autoletters:
    properties:
      id:
        type: number
        format: double
      letterid:
        type: string
      memogroup:
        type: string
      daysinarr:
        type: number
        format: double
      lastupdateby:
        type: string
      lastupdate:
        type: string
        format: date-time
      active:
        type: string
    required:
      - id
      - letterid
      - memogroup
      - daysinarr
    additionalProperties: false
  mcoopcash_stage:
    properties:
      loanaccnumber:
        type: string
      clientname:
        type: string
      loanamount:
        type: number
        format: double
      phonenumber:
        type: string
      idnumber:
        type: string
      interest:
        type: number
        format: double
      arocode:
        type: string
      repaymentamount:
        type: string
      stagedate:
        type: string
        format: date-time
      employer:
        type: string
      amountdisbursed:
        type: string
      dateopen:
        type: string
      loan_type:
        type: string
      address:
        type: string
      disbursaldate:
        type: string
      grade:
        type: string
      arrears_category:
        type: string
      lastpaymentdate:
        type: string
      duedate:
        type: string
      loanstatus:
        type: string
    required:
      - loanaccnumber
    additionalProperties: false
  mcoopcash_static:
    properties:
      loanaccnumber:
        type: string
      cmdstatus:
        type: string
      excuse:
        type: string
      datereceived:
        type: string
        format: date-time
      excuse_other:
        type: string
      accplan:
        type: string
      actiondate:
        type: string
        format: date-time
      routetostate:
        type: string
      branchstatus:
        type: string
      reviewdate:
        type: string
        format: date-time
      colofficer:
        type: string
      curing:
        type: string
    required:
      - loanaccnumber
    additionalProperties: false
  customersuspensions:
    properties:
      custnumber:
        type: string
      demand1:
        type: string
      demand2:
        type: string
      prelisting:
        type: string
      postlistingsecured:
        type: string
      postlistingunsecured:
        type: string
      day90:
        type: string
      day40:
        type: string
      day30:
        type: string
      prelistingremedial:
        type: string
      overduecc:
        type: string
      prelistingcc:
        type: string
      suspension:
        type: string
      postlistingunsecuredcc:
        type: string
      owner:
        type: string
    required:
      - custnumber
    additionalProperties: false
  tqall:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      client_name:
        type: string
      currency:
        type: string
      origdate:
        type: string
      origbalance:
        type: string
      oustbalance:
        type: number
        format: double
      productcode:
        type: string
      daysinarr:
        type: number
        format: double
      instamount:
        type: number
        format: double
      intratearr:
        type: number
        format: double
      princarrears:
        type: number
        format: double
      intarrears:
        type: string
      totalarrears:
        type: number
        format: double
      limitamount:
        type: string
      templimit:
        type: string
      templimitexpirydate:
        type: string
      limitexpirydate:
        type: string
      bucket:
        type: string
      lastcredamnt:
        type: string
      lastcreddate:
        type: string
      nextrepaydate:
        type: string
      branchcode:
        type: string
      arocode:
        type: string
      rrocode:
        type: string
      region:
        type: string
      section:
        type: string
      addressline1:
        type: string
      dob:
        type: string
      celnumber:
        type: string
      telnumber:
        type: string
      nationid:
        type: string
      streetaddress:
        type: string
      postcode:
        type: string
      emailaddress:
        type: string
      colofficer:
        type: string
      branchname:
        type: string
      reviewdate:
        type: string
        format: date-time
      routetostate:
        type: string
      excuse:
        type: string
      branchstatus:
        type: string
      cmdstatus:
        type: string
      manager:
        type: string
      fileno:
        type: string
      settleaccno:
        type: string
      settleaccbal:
        type: number
        format: double
      kbrr:
        type: number
        format: double
      debitaccruedintrate:
        type: number
        format: double
      debitaccruedintamount:
        type: number
        format: double
    required:
      - accnumber
    additionalProperties: false
  qall:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      client_name:
        type: string
      currency:
        type: string
      origdate:
        type: string
      origbalance:
        type: string
      oustbalance:
        type: number
        format: double
      productcode:
        type: string
      daysinarr:
        type: number
        format: double
      instamount:
        type: number
        format: double
      intratearr:
        type: number
        format: double
      princarrears:
        type: number
        format: double
      intarrears:
        type: string
      totalarrears:
        type: number
        format: double
      limitamount:
        type: string
      templimit:
        type: string
      templimitexpirydate:
        type: string
      limitexpirydate:
        type: string
      bucket:
        type: string
      lastcredamnt:
        type: string
      lastcreddate:
        type: string
      nextrepaydate:
        type: string
      branchcode:
        type: string
      arocode:
        type: string
      rrocode:
        type: string
      region:
        type: string
      section:
        type: string
      addressline1:
        type: string
      dob:
        type: string
      celnumber:
        type: string
      telnumber:
        type: string
      nationid:
        type: string
      streetaddress:
        type: string
      postcode:
        type: string
      emailaddress:
        type: string
      colofficer:
        type: string
      branchname:
        type: string
      reviewdate:
        type: string
        format: date-time
      routetostate:
        type: string
      excuse:
        type: string
      excuse_other:
        type: string
      cmdstatus:
        type: string
      manager:
        type: string
      fileno:
        type: string
      settleaccno:
        type: string
      settleaccbal:
        type: number
        format: double
      kbrr:
        type: number
        format: double
      debitaccruedintrate:
        type: number
        format: double
      debitaccruedintamount:
        type: number
        format: double
    required:
      - accnumber
    additionalProperties: false
  activitylog:
    properties:
      id:
        type: number
        format: double
      accountnumber:
        type: string
      custnumber:
        type: string
      collectoraction:
        type: string
      cure:
        type: string
      party:
        type: string
      ptpamount:
        type: number
        format: double
      ptp:
        default: 'N'
        type: string
      ptpdate:
        type: string
        format: date-time
      collectornote:
        type: string
      reviewdate:
        type: string
        format: date-time
      reason:
        type: string
      cmdstatus:
        type: string
      branchstatus:
        type: string
      route:
        type: string
      paymode:
        type: string
      noteimp:
        type: string
      notesrc:
        type: string
      rfdother:
        type: string
      owner:
        type: string
      arramount:
        type: number
        format: double
      oustamount:
        type: number
        format: double
      actiondate:
        type: string
        format: date-time
      product:
        type: string
    required:
      - id
    additionalProperties: false
  cure:
    properties:
      cureid:
        type: number
        format: double
      cure:
        type: string
      active:
        type: string
    required:
      - cureid
      - cure
      - active
    additionalProperties: false
  party:
    properties:
      partyid:
        type: number
        format: double
      party:
        type: string
      active:
        type: string
    required:
      - partyid
      - party
      - active
    additionalProperties: false
  excuse:
    properties:
      excuseid:
        type: number
        format: double
      excuse:
        type: string
      active:
        type: string
    required:
      - excuseid
      - excuse
      - active
    additionalProperties: false
  collectoraction:
    properties:
      collectoractionid:
        type: number
        format: double
      collectoraction:
        type: string
      active:
        type: string
    required:
      - collectoractionid
      - collectoraction
      - active
    additionalProperties: false
  deptcollateral:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      collateralname:
        type: string
      colofficer:
        type: string
      forcedsale:
        type: number
        format: double
      insurancevalue:
        type: number
        format: double
      marketvalue:
        type: number
        format: double
      regowner:
        type: string
      tenure:
        type: string
      valuationdate:
        type: string
      valuer:
        type: string
    required:
      - id
      - accnumber
      - custnumber
    additionalProperties: false
  notifications:
    properties:
      brokenptp:
        type: number
        format: double
      overdue:
        type: number
        format: double
      demandsdue:
        type: number
        format: double
      demandsduecc:
        type: number
        format: double
    required:
      - brokenptp
    additionalProperties: false
  qallcards:
    properties:
      cardnumber:
        type: string
      cardacct:
        type: string
      cardname:
        type: string
      cardstatus:
        type: string
      id:
        type: number
        format: double
    required:
      - cardnumber
    additionalProperties: false
  memos:
    properties:
      memo:
        type: string
    required:
      - memo
    additionalProperties: false
  tcards:
    properties:
      cardnumber:
        type: string
      accountno:
        type: string
      cardacct:
        type: string
      cardname:
        type: string
      sqnumber:
        type: number
        format: double
      marital:
        type: string
      phone:
        type: string
      branchstatus:
        type: string
      exppmnt:
        type: number
        format: double
      limit:
        type: number
        format: double
      prevdebt:
        type: number
        format: double
      cycle:
        type: string
      email:
        type: string
      emailupdate:
        type: string
      addressupdate:
        type: string
      ageinmonths:
        type: number
        format: double
      daysinarrears:
        type: number
        format: double
      lastpaymentdate:
        type: string
      duedate:
        type: string
      datedisbursed:
        type: string
      datesuspended:
        type: string
      salary:
        type: string
      excuse:
        type: string
      accplan:
        type: string
      dob:
        type: string
      routetostate:
        type: string
      colofficer:
        type: string
      rpcode:
        type: string
      cmdstatus:
        type: string
      empstatus:
        type: string
      fileno:
        type: string
      reviewdate:
        type: string
        format: date-time
      basesupp:
        type: string
      collectionstatus:
        type: string
      datereceived:
        type: string
      employer:
        type: string
      city:
        type: string
      address:
        type: string
      primary:
        type: string
      tel:
        type: string
      mobile:
        type: string
      nationid:
        type: string
      outbalance:
        type: number
        format: double
    required:
      - cardnumber
    additionalProperties: false
  branches:
    properties:
      branchcode:
        type: string
      branchname:
        type: string
      branchemail:
        type: string
      manager:
        type: string
      regagribusiness:
        type: string
      regassetfinance:
        type: string
      regcorporate:
        type: string
      region:
        type: string
      regipf:
        type: string
      regmicrocredit:
        type: string
      regmortage:
        type: string
      regpbb:
        type: string
      regportfolio:
        type: string
      regsacco:
        type: string
      regsme:
        type: string
    required:
      - branchcode
      - branchname
      - branchemail
    additionalProperties: false
  cards_watch_static:
    properties:
      cardacct:
        type: string
      lastactiondate:
        type: string
      colofficer:
        type: string
      excuse:
        type: string
      reviewdate:
        type: string
      cmdstatus:
        type: string
      routetostate:
        type: string
      rfdother:
        type: string
    required:
      - cardacct
    additionalProperties: false
  cards_watch_stage:
    properties:
      cardnumber:
        type: string
      accountno:
        type: string
      cardacct:
        type: string
      cardname:
        type: string
      sqnumber:
        type: number
        format: double
      exppmnt:
        type: number
        format: double
      limit:
        type: number
        format: double
      prevdebt:
        type: number
        format: double
      cycle:
        type: string
      email:
        type: string
      title:
        type: string
      fax:
        type: string
      ageinmonths:
        type: number
        format: double
      daysinarrears:
        type: number
        format: double
      lastpaymentdate:
        type: string
      payment:
        type: string
      datedisbursed:
        type: string
      datesuspended:
        type: string
      dob:
        type: string
      stagedate:
        type: string
      rpcode:
        type: string
      basesupp:
        type: string
      city:
        type: string
      address:
        type: string
      tel:
        type: string
      mobile:
        type: string
      nationid:
        type: string
      outbalance:
        type: number
        format: double
    required:
      - cardnumber
    additionalProperties: false
  tbl_s_plans:
    properties:
      planid:
        type: string
      plantitle:
        type: string
      owner:
        type: string
    required:
      - planid
    additionalProperties: false
  tbl_s_actions:
    properties:
      actionid:
        type: string
      actiontitle:
        type: string
      updateby:
        type: string
    required:
      - actionid
    additionalProperties: false
  tbl_s_plan_actions:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      actionid:
        type: string
      actiontitle:
        type: string
      updateby:
        type: string
    required:
      - id
    additionalProperties: false
  tbl_s_account_plans:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      planid:
        type: string
      actionid:
        type: string
      actiontitle:
        type: string
      updateby:
        type: string
      completed:
        type: string
      datecompleted:
        type: string
    required:
      - id
    additionalProperties: false
  tbl_s_planmemos:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      plantitle:
        type: string
      memogroup:
        type: string
      updateby:
        type: string
    required:
      - id
    additionalProperties: false
  tbl_s_accounts:
    properties:
      accnumber:
        type: string
      planid:
        type: string
      dateupdated:
        type: string
      updateby:
        type: string
    required:
      - accnumber
    additionalProperties: false
  plan_remedialofferings:
    properties:
      id:
        type: number
        format: double
      custnumber:
        type: string
      accnumber:
        type: string
      planid:
        type: string
      remedialofferings:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      deleted:
        type: string
      curren:
        type: string
    required:
      - id
    additionalProperties: false
  plan_customerproposals:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      custnumber:
        type: string
      accnumber:
        type: string
      customerproposal:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      deleted:
        type: string
      curren:
        type: string
        format: date-time
    required:
      - id
      - planid
    additionalProperties: false
  plan_ability:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      custnumber:
        type: string
      accnumber:
        type: string
      abilitytopay:
        type: string
      willingtopay:
        default: 'N'
        type: string
      dateupdated:
        type: string
      deleted:
        type: string
      curren:
        type: string
    required:
      - id
      - planid
    additionalProperties: false
  plan_actions:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: number
        format: double
      actionagreed:
        type: string
      initiationdate:
        type: string
      nextreview:
        type: string
      attachment:
        type: string
      rcomment:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      completed:
        default: 'N'
        type: string
    required:
      - id
      - accnumber
    additionalProperties: false
  qview:
    properties:
      accnumber:
        type: string
      custnumber:
        type: string
      productcode:
        type: string
      oustbalance:
        type: number
        format: double
      arocode:
        type: string
      nationid:
        type: string
    required:
      - accnumber
      - custnumber
    additionalProperties: false
  plan_swot:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      custnumber:
        type: string
      accnumber:
        type: string
      strengths:
        type: string
      weaknesses:
        type: string
      opportunities:
        type: string
      threats:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      deleted:
        type: string
      curren:
        type: string
    required:
      - id
      - planid
    additionalProperties: false
  plan_problemdefinition:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      accnumber:
        type: string
      custnumber:
        type: string
      problemdefinition:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      deleted:
        type: string
      curren:
        type: string
    required:
      - id
      - planid
    additionalProperties: false
  plan_background:
    properties:
      id:
        type: number
        format: double
      planid:
        type: string
      accnumber:
        type: string
      custnumber:
        type: string
      background:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
        format: date-time
      deleted:
        default: 'N'
        type: string
      curren:
        default: 'N'
        type: string
    required:
      - id
      - planid
      - accnumber
      - custnumber
    additionalProperties: false
  plan_ptpplans:
    properties:
      id:
        type: number
        format: double
      no_of_frequency:
        type: string
      accnumber:
        type: string
      custnumber:
        type: string
      ptpamount:
        type: number
        format: double
      ptpstartdate:
        type: string
      ptpfreq:
        type: string
      owner:
        type: string
      dateupdated:
        type: string
      ptpmet:
        default: 'N'
        type: string
    required:
      - id
      - no_of_frequency
      - accnumber
    additionalProperties: false
  custview:
    properties:
      PTPID:
        type: number
        format: double
      ACCNUMBER:
        type: string
      PTPAMOUNT:
        type: number
        format: double
      PTPDATE:
        type: string
        format: date-time
      PTPOWNER:
        type: string
      MET:
        default: 'N'
        type: string
    required:
      - PTPID
      - ACCNUMBER
    additionalProperties: false
  sptypes:
    properties:
      SPTITLE:
        type: string
      CONTACTPERSON:
        type: string
      TELEPHONE:
        type: string
      SPCODE:
        type: string
      STARTDATE:
        type: string
      ACCNUMBER:
        type: string
      COVERAGE:
        type: string
      ADDRESS:
        default: 'N'
        type: string
      ENDOFINDEMNITY:
        type: string
      EMAIL:
        type: string
    required:
      - SPTITLE
      - CONTACTPERSON
    additionalProperties: false
  authextletters:
    properties:
      id:
        type: number
        format: double
      accnumber:
        type: string
      custnumber:
        type: string
      nationid:
        type: string
      letterid:
        type: string
      phonenumber:
        type: string
      owner:
        type: string
      postdate:
        type: string
      isdownloaded:
        default: 'n'
        type: string
      downloaddate:
        type: string
    required:
      - accnumber
      - custnumber
      - nationid
      - letterid
      - phonenumber
      - owner
      - postdate
      - isdownloaded
    additionalProperties: false
  extletters:
    properties:
      id:
        type: number
        format: double
      custnumber:
        type: string
      accnumber:
        type: string
      nationid:
        type: string
      letterid:
        type: string
      phonenumber:
        type: string
      postdate:
        type: string
        format: date-time
      isdownloaded:
        default: 'n'
        type: string
      owner:
        type: string
      downloaddate:
        type: string
    required:
      - id
      - custnumber
      - accnumber
      - nationid
      - letterid
      - phonenumber
    additionalProperties: false
